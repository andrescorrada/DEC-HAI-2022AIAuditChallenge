(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 13.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    312405,       6694]
NotebookOptionsPosition[    299709,       6483]
NotebookOutlinePosition[    300229,       6503]
CellTagsIndexPosition[    300186,       6500]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Finding Most Independent Classifier Trios on Unlabeled Data", "Title",
 CellChangeTimes->{{3.870416494807392*^9, 3.8704165149389963`*^9}, {
  3.8728244644751368`*^9, 
  3.872824492105381*^9}},ExpressionUUID->"bcd3c995-0cc1-4a17-bbbb-\
3a732f1bacde"],

Cell["\<\
The core theorem of this submission shows that if we had error independent \
classifiers on a sample, we could efficiently calculate the two possible \
point solutions to their performance and the true prevalence of the two \
classes. But how can we know the classifiers are actually independent on \
unlabeled data? This seems like a chicken and egg problem, and it is for \
evaluation methods that rely on real numbers&mdash;like all probability \
distribution approaches. In this notebook you will see how we can actually \
measure distances between the solutions of the purported independent solution \
and a universal surface that must contain the correct evaluations. This makes \
algebraic evaluators self-checking on their assumptions.
The notebook is organized as follows:

1. Alarms: we briefly talk about how all alarms have flaws. Proper safety \
engineering requires that they be evaluated in their application context.
2. A Universal Evaluation Surface Containing the True Performance: Even when \
we avoid the problem of computing the actual error correlations, we can \
derive a universal surface of dimension n+1 embedded in the 2n+1 space \
defined by their label accuracies and prevalence. We test whether the ground \
truth values for the classifiers do lie on this surface for various trials, \
and if not, measure their nearest distance to it.
3. Search for Most Independent Trios: We can exploit the distance from the \
universal evaluation surface to rank trios evaluated on unlabeled data. Using \
this approach, a search over possible trios is carried out. The results of \
the search yield a handful of trios with very low error correlations (~2%) on \
the unlabeled samples.\
\>", "Text",
 CellChangeTimes->{{3.870416560007392*^9, 3.870416687666049*^9}, {
  3.870416753673461*^9, 3.8704167843086433`*^9}, {3.87041688019711*^9, 
  3.8704179787978563`*^9}, {3.872824630802247*^9, 3.8728247465135*^9}, {
  3.872824879536249*^9, 3.8728249904066057`*^9}, {3.872825028580565*^9, 
  3.872825446071165*^9}, {3.8728254796306057`*^9, 3.87282561291549*^9}, {
  3.8728256473624372`*^9, 
  3.872825818229589*^9}},ExpressionUUID->"4d69d43d-fca1-4c9f-b4de-\
bc7c9c8ddb12"],

Cell[CellGroupData[{

Cell["Alarms will fail, good engineers know when", "Section",
 CellChangeTimes->{{3.870418001104603*^9, 
  3.870418052742536*^9}},ExpressionUUID->"4bab144b-ae03-494f-a2f1-\
3c03b3de0382"],

Cell["\<\
  There is no perfect alarm. There cannot be one. No one will ever submit to \
competitions like Stanford HAI\[CloseCurlyQuote]s AI Audit Challenge the \
perfect tool to carry out its intended auditing task. Good safety engineering \
requires that we understand the failure properties of any proposed alarm.
  We take it as a given that the only safe AI systems of the future will be \
based on the use of ensemble methods in one way or another. Our independent \
trio evaluator is one such ensemble technique that can contribute to that \
future safety. But it fails. This notebook is about using its failures to \
find the most independent trios on a particular dataset.
  This is an exercise that cannot be carried out with probabilistic \
evaluators of noisy judges. By construction they will always return sensible \
answers&mdash;always real numbers. They never fail! We think that is a flaw for \
AI safety.\
\>", "Text",
 CellChangeTimes->{{3.870418067075*^9, 3.8704182117632*^9}, {
  3.8704182744912577`*^9, 3.87041836424615*^9}, {3.8704184370388107`*^9, 
  3.870418658446475*^9}, {3.872825856502411*^9, 
  3.872825904466866*^9}},ExpressionUUID->"47e20420-19a1-48c0-81a7-\
e6f654abe6b7"],

Cell[CellGroupData[{

Cell["Algebraic numbers make AI alarms possible", "Subsubsection",
 CellChangeTimes->{{3.870418678928521*^9, 
  3.870418700103692*^9}},ExpressionUUID->"355e0a5d-d0da-4e0a-a36a-\
75ae1abe5b1c"],

Cell["\<\
There are three failure modes for the independent algebraic evaluator that \
alert us to the inapplicability of its assumptions to a given evaluation \
context.\
\>", "Text",
 CellChangeTimes->{{3.872825972749106*^9, 
  3.872826035434476*^9}},ExpressionUUID->"8d4b4a9b-d521-4aec-bdd3-\
5f87f9242cd9"],

Cell["\<\
Given enough items on a sample test, independent classifiers should produce \
all possible voting patterns. For three classifiers that means that we should \
see eight voting patterns during binary classification. If any one of these \
patterns is absent, we know that the classifiers cannot possibly be \
independent on the sample. Mathematically this is expressed by the algebraic \
solver returning the empty set for the Groebner basis of the independent \
system.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.872826055618862*^9, 
  3.872826331297841*^9}},ExpressionUUID->"7c7d572a-0b77-4317-8168-\
fc32c66b1053"],

Cell["\<\
When evaluating classifiers, we know that all possible solutions must be real \
integer ratios that lie between 0 and 1. Any value for the ensemble that lies \
outside this range is also a sign that the assumption of error independence \
must be wrong.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.872826055618862*^9, 
  3.872826454731059*^9}},ExpressionUUID->"d67b66bb-a289-4848-a5bc-\
4a331b981994"],

Cell["\<\
Finally, the independent algebraic evaluator can return complex numbers: a \
clearly nonsensical answer.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.872826055618862*^9, 
  3.8728265233527193`*^9}},ExpressionUUID->"41e2b6e0-d550-43a9-80ae-\
1a49c4eb4297"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Initial look at the code and confirming it works", "Section",
 CellChangeTimes->{{3.870418735367992*^9, 3.8704187695502863`*^9}, {
  3.870596606676496*^9, 
  3.8705966396036253`*^9}},ExpressionUUID->"e4431d5b-799b-40cd-89da-\
495df9619242"],

Cell[CellGroupData[{

Cell["\<\
Getting the dataset and preparing it for training and testing\
\>", "Subsection",
 CellChangeTimes->{{3.8705054972327337`*^9, 
  3.8705055093265553`*^9}},ExpressionUUID->"d573a88a-7404-4d04-95b7-\
b9dbb019a0ef"],

Cell["\<\
Mathematica has powerful built-in functions to help us retrieve public \
datasets. Public datasets are an important part of the \
scientific/research/development eco-systems. They help promote transparency \
and reproducibility of research claims.The running example used throughout \
this submission is the UCI Adult Dataset. There are various reasons this \
dataset was chosen:\
\>", "Text",
 CellChangeTimes->{{3.8705055136516867`*^9, 3.8705056529319057`*^9}, 
   3.870505803852085*^9, 
   3.8705058409166203`*^9},ExpressionUUID->"944f58e9-dd54-4916-9bdd-\
8517d4750675"],

Cell["It is public.", "ItemNumbered",
 CellChangeTimes->{{3.87050566897493*^9, 3.8705057256623793`*^9}, {
  3.870505814426046*^9, 3.87050583186353*^9}, {3.870505924273933*^9, 
  3.870505928800699*^9}},ExpressionUUID->"0c11b4cb-8a6a-4df0-ae26-\
4b12bd7520d7"],

Cell["It is used to train and test binary classifiers.", "ItemNumbered",
 CellChangeTimes->{{3.87050566897493*^9, 3.8705057256623793`*^9}, {
  3.870505814426046*^9, 3.870505831240716*^9}, {3.8705058725592127`*^9, 
  3.870505896971167*^9}, {3.8705059330200663`*^9, 
  3.87050594447715*^9}},ExpressionUUID->"a90a9b2f-0c88-4b44-8121-\
a25ee238d3a5"],

Cell["\<\
It is used in the AI fairness research literature since it contains two \
sensitive attributes of concern to society - gender and age.\
\>", "ItemNumbered",
 CellChangeTimes->{{3.87050566897493*^9, 3.8705057256623793`*^9}, {
  3.870505814426046*^9, 3.870505831240716*^9}, {3.8705058725592127`*^9, 
  3.870505894614092*^9}, {3.8705059592432117`*^9, 
  3.870506043439095*^9}},ExpressionUUID->"0f84da5b-d520-42d2-841b-\
614bea97ed08"],

Cell["\<\
Mathematica curates an extensive data repository. Perhaps we can find UCI \
Adult in it.\
\>", "Text",
 CellChangeTimes->{{3.87050620140694*^9, 
  3.870506238977919*^9}},ExpressionUUID->"70267c42-7d85-42d4-9a2b-\
f40a46f33d88"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResourceSearch", "[", "\"\<UCI\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.87050616849463*^9, 3.870506175254813*^9}},
 CellLabel->
  "In[3751]:=",ExpressionUUID->"16efe054-a2db-4b9d-9b3e-ab2435b4ad6e"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Name" -> "Sample Data: UCI Letter", "ResourceType" -> "DataResource", 
        "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Sample Data: UCI Letter", "UUID" -> 
           "658836ec-d7b0-43bb-a080-5a7ef51553bf", "ResourceType" -> 
           "DataResource", "Version" -> "1.0.0", "Description" -> 
           "Letter recognition dataset", "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "WolframLanguageVersionRequired" -> "10.0", "ContentSize" -> 
           Quantity[56.162423999999994`, "Megabytes"], 
           "ContentElements" -> {
            "ColumnTypes", "Data", "Dataset", "TestData", "TrainingData"}|>], 
        "Description" -> "Letter recognition dataset", "Location" -> 
        URL["https://resources.wolframcloud.com"], "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/658836ec-d7b0-43bb-a080-5a7ef51553bf"]|>, <|
       "Name" -> "Gliders in 2D Cellular Automata", "ResourceType" -> 
        "DataResource", "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Gliders in 2D Cellular Automata", "UUID" -> 
           "3b4df66a-3d94-4bcd-a133-e0b5d0ae2d00", "ResourceType" -> 
           "DataResource", "Version" -> "1.0.0", "Description" -> 
           "A 2D cellular automaton glider compilation by David Eppstein", 
           "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "WolframLanguageVersionRequired" -> "10.0", "ContentSize" -> 
           Quantity[196.24567199999998`, "Megabytes"], 
           "ContentElements" -> {"GliderDatabase"}|>], "Description" -> 
        "A 2D cellular automaton glider compilation by David Eppstein", 
        "Location" -> URL["https://resources.wolframcloud.com"], 
        "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/3b4df66a-3d94-4bcd-a133-e0b5d0ae2d00"]|>, <|
       "Name" -> "Sample Data: Satellite", "ResourceType" -> "DataResource", 
        "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Sample Data: Satellite", "UUID" -> 
           "ce6346ee-856e-458d-aef1-9e3184f7ca50", "ResourceType" -> 
           "DataResource", "Version" -> "1.0.0", "Description" -> 
           "Classify the type of land surface of a scene photographed by the \
Landsat MSS satellite given four digital images of the scene taken in \
different spectral bands", "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "WolframLanguageVersionRequired" -> "10.0", "ContentSize" -> 
           Quantity[39.503296, "Megabytes"], 
           "ContentElements" -> {
            "ColumnTypes", "Data", "Dataset", "TestData", "TrainingData"}|>], 
        "Description" -> 
        "Classify the type of land surface of a scene photographed by the \
Landsat MSS satellite given four digital images of the scene taken in \
different spectral bands", "Location" -> 
        URL["https://resources.wolframcloud.com"], "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/ce6346ee-856e-458d-aef1-9e3184f7ca50"]|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "ResourceType"} -> 1, {All, "ResourceObject"} -> 
        1, {All, "Description"} -> 1, {All, "Location"} -> 
        1, {All, "DocumentationLink"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
            "ResourceType" -> TypeSystem`PackageScope`AtomShape[126.], 
            "ResourceObject" -> TypeSystem`PackageScope`AtomShape[60], 
            "Description" -> TypeSystem`PackageScope`AtomShape[560.], 
            "Location" -> TypeSystem`PackageScope`AtomShape[60], 
            "DocumentationLink" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 6, {All}]], 3, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Name", "ResourceType", "ResourceObject", "Description", "Location", 
         "DocumentationLink"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DataResource"]], 
         TypeSystem`Atom[ResourceObject], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[URL], 
         TypeSystem`Atom[URL]}], 3], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "ResourceType"} -> 1, {All, "ResourceObject"} -> 
        1, {All, "Description"} -> 1, {All, "Location"} -> 
        1, {All, "DocumentationLink"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[347.20000000000005`], 
            "ResourceType" -> TypeSystem`PackageScope`AtomShape[126.], 
            "ResourceObject" -> TypeSystem`PackageScope`AtomShape[60], 
            "Description" -> TypeSystem`PackageScope`AtomShape[560.], 
            "Location" -> TypeSystem`PackageScope`AtomShape[60], 
            "DocumentationLink" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 6, {All}]], 3, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Name", "ResourceType", "ResourceObject", "Description", "Location", 
         "DocumentationLink"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DataResource"]], 
         TypeSystem`Atom[ResourceObject], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[URL], 
         TypeSystem`Atom[URL]}], 3], "Path" -> {}, "DisplayedRowCount" -> 3, 
     "DisplayedColumnCount" -> 6, "DataRowCount" -> 3, "DataColumnCount" -> 6,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ResourceType", 
                  Style[
                  "ResourceType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ResourceType"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ResourceType"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ResourceObject", 
                  Style[
                  "ResourceObject", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ResourceObject"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ResourceObject"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Description", 
                  Style[
                  "Description", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Description"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Description"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Location", 
                  Style[
                  "Location", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Location"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Location"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DocumentationLink", 
                  Style[
                  "DocumentationLink", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DocumentationLink"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DocumentationLink"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Sample Data: UCI Letter", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Sample Data: UCI Letter\"", "\"\\\"\"", "\"]\""}, 
                 "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["Letter recognition dataset", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/658836ec-d7b0-43bb-a080-5a7ef51553bf"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Gliders in 2D Cellular Automata", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Gliders in 2D Cellular Automata\"", "\"\\\"\"", "\"]\""},
                  "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "A 2D cellular automaton glider compilation by David Eppstein", 
               
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/3b4df66a-3d94-4bcd-a133-e0b5d0ae2d00"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Sample Data: Satellite", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{347.20000000000005`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Sample Data: Satellite\"", "\"\\\"\"", "\"]\""}, 
                 "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Classify the type of land surface of a scene photographed by \
the Landsat MSS satellite given four digital images of the scene taken in \
different spectral bands", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/ce6346ee-856e-458d-aef1-9e3184f7ca50"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1555., {91.2010498046875, 99.7989501953125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1555., {91.2010498046875, 99.7989501953125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8705061823976593`*^9, 3.872826621464373*^9},
 CellLabel->
  "Out[3751]=",ExpressionUUID->"a017274c-a52c-4ce3-b334-92bb6b6a4e2e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ResourceSearch", "[", "\"\<Adult\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.8705062576643953`*^9, 3.870506260790091*^9}},
 CellLabel->
  "In[3752]:=",ExpressionUUID->"8fbe5811-9aa6-4f69-bfac-62aa9b38bd1f"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = <|
    "InitialData" -> {<|
       "Name" -> "Sample Data: Time to AIDS Induction", "ResourceType" -> 
        "DataResource", "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Sample Data: Time to AIDS Induction", "UUID" -> 
           "545ad035-b0ce-4c05-9432-1062d9e25a5d", "ResourceType" -> 
           "DataResource", "Version" -> "1.0.0", "Description" -> 
           "Time to AIDS in years for adults and children from 1978", 
           "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "ContentSize" -> Quantity[220.89600000000002`, "Kilobytes"], 
           "ContentElements" -> {"Content", "RawData"}|>], "Description" -> 
        "Time to AIDS in years for adults and children from 1978", "Location" -> 
        URL["https://resources.wolframcloud.com"], "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/545ad035-b0ce-4c05-9432-1062d9e25a5d"]|>, <|
       "Name" -> "Sample Data: Paracou Kimboto Trees", "ResourceType" -> 
        "DataResource", "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Sample Data: Paracou Kimboto Trees", "UUID" -> 
           "7cfd182a-97e1-46d0-b59e-5bef45db5a0a", "ResourceType" -> 
           "DataResource", "Version" -> "1.1.0", "Description" -> 
           "Locations of Kimboto trees at Paracou in French Guiana, annotated \
with adult/juvenile marks", "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "ContentElements" -> {
            "Annotations", "AnnotationsKeys", "Data", "Description", 
             "Dimension", "Locations", "LongDescription", "Name", 
             "ObservationRegion", "PointCount", "RegionScale", "Source"}|>], 
        "Description" -> 
        "Locations of Kimboto trees at Paracou in French Guiana, annotated \
with adult/juvenile marks", "Location" -> 
        URL["https://resources.wolframcloud.com"], "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/7cfd182a-97e1-46d0-b59e-5bef45db5a0a"]|>, <|
       "Name" -> "Sample Data: Fisher's Cats", "ResourceType" -> 
        "DataResource", "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "Sample Data: Fisher's Cats", "UUID" -> 
           "7627abc3-4b41-4d92-b961-e94d9f31d3c4", "ResourceType" -> 
           "DataResource", "Version" -> "1.1.0", "Description" -> 
           "The heart and body weights of samples of male and female cats \
used for digitalis experiments. The cats were all adult, over 2 kg body \
weight.", "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "ContentSize" -> Quantity[139.768, "Kilobytes"], 
           "ContentElements" -> {"Content", "RawData"}|>], "Description" -> 
        "The heart and body weights of samples of male and female cats used \
for digitalis experiments. The cats were all adult, over 2 kg body weight.", 
        "Location" -> URL["https://resources.wolframcloud.com"], 
        "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/7627abc3-4b41-4d92-b961-e94d9f31d3c4"]|>, <|
       "Name" -> "NYC After-School Jobs and Internships", "ResourceType" -> 
        "DataResource", "ResourceObject" -> 
        ResourceObject[<|
          "Name" -> "NYC After-School Jobs and Internships", "UUID" -> 
           "f3af4775-6f11-4eb4-a5a5-3d82d7882a90", "ResourceType" -> 
           "DataResource", "Version" -> "1.0.0", "Description" -> 
           "Agencies in NYC offering after-school job and internship \
programs", "RepositoryLocation" -> 
           URL["https://www.wolframcloud.com/obj/resourcesystem/api/1.0"], 
           "ContentSize" -> Quantity[161.928, "Kilobytes"], 
           "ContentElements" -> {
            "ColumnDescriptions", "ColumnNames", "Dataset"}|>], "Description" -> 
        "Agencies in NYC offering after-school job and internship programs", 
        "Location" -> URL["https://resources.wolframcloud.com"], 
        "DocumentationLink" -> 
        URL["https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/f3af4775-6f11-4eb4-a5a5-3d82d7882a90"]|>}, 
     "AllowEmbedding" -> True, "InitialShape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "ResourceType"} -> 1, {All, "ResourceObject"} -> 
        1, {All, "Description"} -> 1, {All, "Location"} -> 
        1, {All, "DocumentationLink"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "ResourceType" -> TypeSystem`PackageScope`AtomShape[126.], 
            "ResourceObject" -> TypeSystem`PackageScope`AtomShape[60], 
            "Description" -> TypeSystem`PackageScope`AtomShape[560.], 
            "Location" -> TypeSystem`PackageScope`AtomShape[60], 
            "DocumentationLink" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 6, {All}]], 4, 
        DirectedInfinity[1], {}]], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Name", "ResourceType", "ResourceObject", "Description", "Location", 
         "DocumentationLink"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DataResource"]], 
         TypeSystem`Atom[ResourceObject], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[URL], 
         TypeSystem`Atom[URL]}], 4], "Meta" -> <||>, "RowTarget" -> 20, 
     "ColumnTarget" -> 10, "Shape" -> 
     TypeSystem`PackageScope`HeaderShape[<|{All, "Name"} -> 
        1, {All, "ResourceType"} -> 1, {All, "ResourceObject"} -> 
        1, {All, "Description"} -> 1, {All, "Location"} -> 
        1, {All, "DocumentationLink"} -> 1|>, 
       TypeSystem`PackageScope`Limited[
        TypeSystem`PackageScope`ColumnShape[
         TypeSystem`PackageScope`Limited[
          
          TypeSystem`PackageScope`RowShape[<|
           "Name" -> TypeSystem`PackageScope`AtomShape[414.40000000000003`], 
            "ResourceType" -> TypeSystem`PackageScope`AtomShape[126.], 
            "ResourceObject" -> TypeSystem`PackageScope`AtomShape[60], 
            "Description" -> TypeSystem`PackageScope`AtomShape[560.], 
            "Location" -> TypeSystem`PackageScope`AtomShape[60], 
            "DocumentationLink" -> TypeSystem`PackageScope`AtomShape[60]|>], 
          DirectedInfinity[1], 6, {All}]], 4, 
        DirectedInfinity[1], {}]], "Type" -> TypeSystem`Vector[
       TypeSystem`Struct[{
        "Name", "ResourceType", "ResourceObject", "Description", "Location", 
         "DocumentationLink"}, {
         TypeSystem`Atom[String], 
         TypeSystem`Atom[
          TypeSystem`Enumeration["DataResource"]], 
         TypeSystem`Atom[ResourceObject], 
         TypeSystem`Atom[String], 
         TypeSystem`Atom[URL], 
         TypeSystem`Atom[URL]}], 4], "Path" -> {}, "DisplayedRowCount" -> 4, 
     "DisplayedColumnCount" -> 6, "DataRowCount" -> 4, "DataColumnCount" -> 6,
      "SortPaths" -> {}, "SortDirections" -> {}, "HiddenItemsMap" -> Null, 
     "UpdateType" -> 1|>, TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Name", 
                  Style[
                  "Name", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Name"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Name"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ResourceType", 
                  Style[
                  "ResourceType", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ResourceType"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ResourceType"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["ResourceObject", 
                  Style[
                  "ResourceObject", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "ResourceObject"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "ResourceObject"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Description", 
                  Style[
                  "Description", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Description"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Description"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["Location", 
                  Style[
                  "Location", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "Location"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "Location"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}], 
            Item[
             Pane[
              Annotation[
               EventHandler[
                MouseAppearance[
                 Mouseover["DocumentationLink", 
                  Style[
                  "DocumentationLink", FontColor -> 
                   RGBColor[
                    0.27450980392156865`, 0.5372549019607843, 
                    0.792156862745098]]], "LinkHand"], {"MouseClicked", 1} :> 
                If[
                  TypeSystem`NestedGrid`PackagePrivate`checkInteractivity[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                  TypeSystem`NestedGrid`PackagePrivate`updateState[
                  TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                   TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                   TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][{
                   All, "DocumentationLink"}, 1]]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{
                All, "DocumentationLink"}, "ColumnHeader", True], "Mouse"], 
              ImageSize -> {{1, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], Background -> 
             GrayLevel[0.95], Alignment -> {Left, Baseline}]}, {
            Item[
             Pane[
              Annotation["Sample Data: Time to AIDS Induction", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Sample Data: Time to AIDS Induction\"", "\"\\\"\"", 
                  "\"]\""}, "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Time to AIDS in years for adults and children from 1978", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/545ad035-b0ce-4c05-9432-1062d9e25a5d"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{1, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Sample Data: Paracou Kimboto Trees", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Sample Data: Paracou Kimboto Trees\"", "\"\\\"\"", 
                  "\"]\""}, "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Locations of Kimboto trees at Paracou in French Guiana, \
annotated with adult/juvenile marks", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/7cfd182a-97e1-46d0-b59e-5bef45db5a0a"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{2, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["Sample Data: Fisher's Cats", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"Sample Data: Fisher's Cats\"", "\"\\\"\"", "\"]\""}, 
                 "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "The heart and body weights of samples of male and female cats \
used for digitalis experiments. The cats were all adult, over 2 kg body \
weight.", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/7627abc3-4b41-4d92-b961-e94d9f31d3c4"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{3, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation["NYC After-School Jobs and Internships", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Name"]}, "Item", False], "Mouse"], 
              ImageSize -> {{414.40000000000003`, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation["DataResource", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ResourceType"]}, "Item", False], "Mouse"], 
              ImageSize -> {{126., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes[
                
                TemplateBox[{
                 "\"ResourceObject\"", "\"[\"", "\"\\\"\"", 
                  "\"NYC After-School Jobs and Internships\"", "\"\\\"\"", 
                  "\"]\""}, "RowDefault"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["ResourceObject"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
              "Agencies in NYC offering after-school job and internship \
programs", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Description"]}, "Item", False], "Mouse"], 
              ImageSize -> {{560., Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink["https://resources.wolframcloud.com", 
                URL["https://resources.wolframcloud.com"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["Location"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               Hyperlink[
               "https://www.wolframcloud.com/obj/resourcesystem/pu...", 
                URL[
                "https://www.wolframcloud.com/obj/resourcesystem/published/\
DataRepository/resources/f3af4775-6f11-4eb4-a5a5-3d82d7882a90"]], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][{4, 
                 Key["DocumentationLink"]}, "Item", False], "Mouse"], 
              ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`localHold[
                 TypeSystem`NestedGrid`PackagePrivate`$outputID$$], {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    "Show " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    "Hide " <> 
                    Which[TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    If[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], Nothing]}]]]]], FontFamily -> 
            "Source Sans Pro", FontSize -> 14, FontWeight -> Plain}, Dividers -> 
          All, FrameStyle -> GrayLevel[0.7490196078431373], 
          Spacings -> {0, 0}, Alignment -> Left, 
          BaseStyle -> {
           FontFamily -> "Source Sans Pro", FontSize -> 14, FontWeight -> 
            Plain}], LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> 
         False, ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         TypeSystem`NestedGrid`PackagePrivate`renderedGrid]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][Null, 
           Blank[]] -> "", TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
           TypeSystem`NestedGrid`PackagePrivate`localHold[
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`localHold[
            TypeSystem`NestedGrid`PackagePrivate`$outputID$$]; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{1556., {111.7010498046875, 120.2989501953125}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{1556., {111.7010498046875, 120.2989501953125}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>(TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = 
     CreateUUID[]),
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.870506263562256*^9, 3.8728266271575747`*^9},
 CellLabel->
  "Out[3752]=",ExpressionUUID->"e287259e-b90d-4882-abaf-ce98bbcbf4f8"]
}, Open  ]],

Cell["\<\
The UPenn Dataset Repository is one place we can find the UCI Adult dataset \
and other ones like it. Let\[CloseCurlyQuote]s use that.\
\>", "Text",
 CellChangeTimes->{{3.870506291690304*^9, 
  3.870506345009391*^9}},ExpressionUUID->"eb1653cb-1d83-459c-be6f-\
902b95de04ec"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"tsvHeader", ",", " ", "benchmarkData"}], "}"}], " ", "=", " ", 
   RowBox[{"ImportPennMLBenchmarksDataset", "[", "\"\<adult\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8705235525461493`*^9, 3.8705235571860437`*^9}, {
  3.870596259432252*^9, 3.870596283037717*^9}},
 CellLabel->
  "In[3753]:=",ExpressionUUID->"07259698-ce42-481a-baae-128f16fcde68"],

Cell[CellGroupData[{

Cell[BoxData["tsvHeader"], "Input",
 CellChangeTimes->{{3.870523583077188*^9, 3.8705235866731453`*^9}},
 CellLabel->
  "In[3754]:=",ExpressionUUID->"b1262ebf-6e0a-4983-8bcb-4a655a305a0a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"age\"\>", ",", "\<\"workclass\"\>", ",", "\<\"fnlwgt\"\>", 
   ",", "\<\"education\"\>", ",", "\<\"education-num\"\>", 
   ",", "\<\"marital-status\"\>", ",", "\<\"occupation\"\>", 
   ",", "\<\"relationship\"\>", ",", "\<\"race\"\>", ",", "\<\"sex\"\>", 
   ",", "\<\"capital-gain\"\>", ",", "\<\"capital-loss\"\>", 
   ",", "\<\"hours-per-week\"\>", ",", "\<\"native-country\"\>", 
   ",", "\<\"target\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.870523588133562*^9, 3.870596289409478*^9, 
  3.871638540395935*^9, 3.871706906357135*^9, 3.8717090853936033`*^9, 
  3.871717587823229*^9, 3.871724110745204*^9, 3.871969349503574*^9, 
  3.87197171029183*^9, 3.8720667345791607`*^9, 3.872073865428359*^9, 
  3.872306715558063*^9, 3.872314473142736*^9, 3.872826635366192*^9},
 CellLabel->
  "Out[3754]=",ExpressionUUID->"418eff3c-612d-45fc-afb8-e7af577d69da"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Choosing features for the ensemble of classifiers.", "Subsection",
 CellChangeTimes->{{3.870596320850134*^9, 
  3.870596335726218*^9}},ExpressionUUID->"fda6bf1d-84e9-4f1e-a051-\
82460809eb2c"],

Cell["\<\
If we could always have classifiers independent on their testing sample \
errors, then AI safety would be easy to solve by the theorem in \
TheCoreConcept.nb. The practical reality is that error correlated classifiers \
are a reality and should be planned for in any evaluator that claims to \
successfully monitor them.
The engineering approach taken in this notebook is that we can increase their \
error independence by training them on different features of the data.\
\>", "Text",
 CellChangeTimes->{{3.870596354789775*^9, 3.870596571586914*^9}, {
  3.871638584496532*^9, 3.871638597196577*^9}, {3.872826591437107*^9, 
  3.872826593362908*^9}, {3.8728269989070044`*^9, 
  3.872827026828364*^9}},ExpressionUUID->"cb81a8b4-42dd-4e8c-8568-\
0fa33de9a218"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Preparing the benchmark data for training and tests", "Subsection",
 CellChangeTimes->{{3.870596675530126*^9, 
  3.870596712298141*^9}},ExpressionUUID->"db2c4d6c-490b-43d4-abe6-\
197b90b58627"],

Cell["\<\
We first choose a global pool of training and testing separation. In the \
experiments we are about to make, we want a clear demarcation between the \
data used for training runs from those used for testing runs. Our tests
are going to involve repeated random draws for training and testing. The \
training side represents the labeled data we have for building classifiers \
\[OpenCurlyDoubleQuote]in the lab\[CloseCurlyDoubleQuote], if you will. The \
testing side represents the reality during deployment where we must evaluate \
without knowledge of the labels. Any mixing of the two pools&mdash;training and \
testing&mdash;would invalidate any strong conclusions about being able to perform \
a task without ground truth since the mixing allowed during the experiment \
would be absent. We have to treat the unlabeled data as it is future data and \
completely unavailable for the training phases of our experiments.\
\>", "Text",
 CellChangeTimes->{{3.870596752954116*^9, 3.870596825381761*^9}, {
  3.8716386567225037`*^9, 3.871638657329483*^9}, {3.87163869035319*^9, 
  3.871639242002222*^9}},ExpressionUUID->"2260482e-7fcf-414a-b230-\
43676631dd67"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"trainingPoolSize", "=", "9000"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"globalTrainTestSplit", "=", 
   RowBox[{"Association", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"0", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"benchmarkData", "[", "0", "]"}], "]"}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}]}], "}"}], "&"}]}], 
       ")"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"1", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"benchmarkData", "[", "1", "]"}], "]"}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}]}], "}"}], "&"}]}], 
       ")"}]}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.870596773682116*^9, 3.8705967740664167`*^9}, {
   3.870596834656398*^9, 3.870596850406443*^9}, {3.87163925552164*^9, 
   3.871639450945252*^9}, {3.872066739238399*^9, 3.8720667494717283`*^9}, {
   3.872073885482696*^9, 3.872073886816247*^9}, 3.8723145053835583`*^9, {
   3.872342260860553*^9, 3.872342261444294*^9}, {3.8723962898697777`*^9, 
   3.872396292288555*^9}, {3.8723965047300873`*^9, 3.872396505978587*^9}},
 CellLabel->
  "In[3756]:=",ExpressionUUID->"16a01e0c-fd0d-4255-bf2c-4896149d4b8b"],

Cell[BoxData["9000"], "Output",
 CellChangeTimes->{
  3.871639462620154*^9, 3.871706914849142*^9, 3.871709089302682*^9, 
   3.8717176169506187`*^9, 3.871724116434239*^9, 3.871969362403438*^9, 
   3.871971749914731*^9, 3.872066751112369*^9, {3.872073873617037*^9, 
   3.872073887833202*^9}, 3.872306723173233*^9, 3.872314508855803*^9, 
   3.8723422622370787`*^9, 3.87239629518219*^9, 3.872396507403385*^9, 
   3.872826655675061*^9},
 CellLabel->
  "Out[3756]=",ExpressionUUID->"1749d374-b700-46e6-890d-8735a598e7d3"]
}, Open  ]],

Cell["Let\[CloseCurlyQuote]s check our data sizes came out correctly.", "Text",
 CellChangeTimes->{{3.870596862584695*^9, 3.870596881570097*^9}, {
  3.8717069185636168`*^9, 3.8717069202752028`*^9}, {3.8723067282713346`*^9, 
  3.872306730016192*^9}, {3.8723962980430727`*^9, 
  3.8723963002435713`*^9}},ExpressionUUID->"d6d8a322-9c65-49cb-a495-\
e15b8ffac15c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Map", "[", 
  RowBox[{"Length", ",", "globalTrainTestSplit", ",", 
   RowBox[{"{", "2", "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.870539566930275*^9, 3.870539584620282*^9}, {
  3.871639475550408*^9, 3.8716394803990517`*^9}},
 CellLabel->
  "In[3758]:=",ExpressionUUID->"eca82dc6-16ef-4f45-85e4-181b8e9e6598"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"0", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"9000", ",", "2687"}], "}"}]}], ",", 
   RowBox[{"1", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"9000", ",", "28155"}], "}"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.870539579971526*^9, 3.870539585884845*^9}, 
   3.870596877355171*^9, 3.871639482543598*^9, 3.871706922474938*^9, 
   3.871717620602438*^9, 3.8720667559102373`*^9, {3.872073876963423*^9, 
   3.872073890648185*^9}, 3.872306732505105*^9, 3.872314512479987*^9, 
   3.8723422670928173`*^9, 3.872396302903734*^9, 3.872396511527892*^9, 
   3.8728266591281643`*^9},
 CellLabel->
  "Out[3758]=",ExpressionUUID->"69abd17c-ee35-4a21-bcc3-21a7cd98749e"]
}, Open  ]],

Cell["\<\
Looks good. We begin looking at the 7 dimensional space defined by the \
prevalence and the two label accuracies for each of three classifiers.\
\>", "Text",
 CellChangeTimes->{{3.870597036825437*^9, 3.870597079329335*^9}, {
  3.8722264776721487`*^9, 
  3.872226565403385*^9}},ExpressionUUID->"20c42cb6-6cc5-4908-9fe9-\
22fefd404443"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
An implicit region that always contains the ground truth point\
\>", "Section",
 CellChangeTimes->{{3.872049085156342*^9, 3.872049099554401*^9}, {
  3.872226187323971*^9, 
  3.87222620811158*^9}},ExpressionUUID->"d6d4ca9d-7ce1-4c10-88be-\
dc9e33f1a7fe"],

Cell["\<\
The math of the central theorem is agnostic as to its meaning. Application \
context determines that meaning. We are using that math to estimate \
performance statistics for the classifiers and one environmental variable&mdash; \
the prevalence. These statistics are, by definition, confined to the range \
of 0 to 1. In addition, we know that the their true values must be some ratio \
of integers. Our uncertainty is thus bound by a unit hypercube anchored at \
the origin and with the diagonally opposite point at the (1,1,1,1,1,1,1) point.
This section now considers using the decisions of the classifiers to shrink \
that unit cube uncertainty to a surface of dimension 4 in the 7 dimensional \
space. We will build that surface and then train a trio of classifiers. We \
then confirm if their performance lies on the implicit region as claimed.\
\>", "Text",
 CellChangeTimes->{{3.872226589086248*^9, 3.8722270528755903`*^9}, {
  3.872826692125759*^9, 
  3.872826751362405*^9}},ExpressionUUID->"e1dff5a3-df83-4275-ba00-\
7e00d8b38a99"],

Cell[CellGroupData[{

Cell["Doing a run and testing surface membership", "Subsection",
 CellChangeTimes->{{3.872227108593041*^9, 
  3.872227119779253*^9}},ExpressionUUID->"4a9eb61f-791d-425d-af0f-\
5fbc87109975"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "FirstSolutionPoint", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"FirstSolutionPoint", "[", "eval_List", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Last", "@", "eval"}], "//", "First"}], "//", "First"}], "//", 
   "Association"}]}], "\[IndentingNewLine]", 
 RowBox[{"Clear", "[", "SecondSolutionPoint", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SecondSolutionPoint", "[", "eval_List", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"Last", "@", "eval"}], "//", "First"}], "//", "Last"}], "//", 
   "Association"}]}]}], "Input",
 CellChangeTimes->{{3.872228337899802*^9, 3.87222835234769*^9}, {
  3.8722283897527018`*^9, 3.872228414611442*^9}, {3.87222851846124*^9, 
  3.872228583595087*^9}},
 CellLabel->
  "In[3759]:=",ExpressionUUID->"74e3b699-702c-43e6-8652-522165f5638f"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "GroundTruthCoordinates", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"GroundTruthCoordinates", "[", "point_Association", "]"}], ":=", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["P", "\[Alpha]"], ",", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], ",", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], ",", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], ",", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], ",", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], ",", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "/.", "point"}]}]}], "Input",
 CellChangeTimes->{{3.872228659683131*^9, 3.872228789566605*^9}},
 CellLabel->
  "In[3763]:=",ExpressionUUID->"f906e884-ab74-4735-9612-942ccef15d8a"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "SelectTrainTestSplit", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SelectTrainTestSplit", "[", 
   RowBox[{"data_", ",", "nTestAlpha_Integer", ",", "nTrain_Integer"}], "]"}],
   ":=", "\[IndentingNewLine]", 
  RowBox[{"Association", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"0", "->", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"First", "@", 
          RowBox[{"data", "[", "0", "]"}]}], "]"}], "//", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "nTrain"}], "]"}], "&"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"Last", "@", 
          RowBox[{"data", "[", "0", "]"}]}], "]"}], "//", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "nTestAlpha"}], "]"}], "&"}]}]}], "}"}]}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"1", "->", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"First", "@", 
          RowBox[{"data", "[", "1", "]"}]}], "]"}], "//", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "nTrain"}], "]"}], "&"}]}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"Last", "@", 
          RowBox[{"data", "[", "1", "]"}]}], "]"}], "//", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{"2", "*", "nTestAlpha"}], "//", "Floor"}]}], "]"}], 
         "&"}]}]}], "}"}]}]}], "]"}]}]}], "Input",
 CellChangeTimes->{{3.8722289851110153`*^9, 3.87222914171426*^9}, {
  3.872229202124264*^9, 3.872229210651655*^9}, {3.872229297089395*^9, 
  3.872229310311461*^9}, {3.872229390289608*^9, 3.872229583620008*^9}, {
  3.872342411597763*^9, 3.8723424285486393`*^9}, {3.872343118154087*^9, 
  3.872343131241008*^9}},
 CellLabel->
  "In[3765]:=",ExpressionUUID->"9b0b19f3-de00-479d-8102-fe910e4fd448"],

Cell[BoxData[{
 RowBox[{"Clear", "[", "IsNotComplexQ", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"IsNotComplexQ", "[", "eval_List", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"eval", "//", "Last"}], "//", "Flatten"}], "//", 
    RowBox[{
     RowBox[{"Last", "/@", "#"}], "&"}]}], "//", 
   RowBox[{
    RowBox[{"Not", "@", 
     RowBox[{"MemberQ", "[", 
      RowBox[{"#", ",", "_Complex", ",", "Infinity"}], "]"}]}], 
    "&"}]}]}]}], "Input",
 CellChangeTimes->{{3.872311333172414*^9, 3.872311381400138*^9}, {
  3.872311595334999*^9, 3.872311689061027*^9}},
 CellLabel->
  "In[3767]:=",ExpressionUUID->"d718a13c-d86e-4385-8b81-5c7c6f857d25"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "do", " ", "a", " ", "random", " ", "partition", " ", "of", " ",
     "the", " ", "UCI", " ", "Adult", " ", "features"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"classifiersFeatures", "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"uciAdultFeatures", "[", 
           RowBox[{"[", 
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"Range", "@", "14"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}]}], "]"}], "]"}], "]"}], "//", 
          "\[IndentingNewLine]", "RandomSample"}], "//", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Partition", "[", 
           RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"Sort", ",", "#"}], "]"}], "&"}]}], "//", "Sort"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Settings", " ", "for", " ", "training", " ", "and", " ", "testing", " ", 
     "sample", " ", "sizes"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{"\"\<NaiveBayes\>\"", ",", 
       RowBox[{"{", "3", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runTrainTestSplit", "=", 
     RowBox[{"SelectTrainTestSplit", "[", 
      RowBox[{"globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingIndices", "=", 
     RowBox[{"Transpose", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], "}"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiersData", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"First", "@", 
             RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], "&"}], 
         ",", "runTrainTestSplit", ",", 
         RowBox[{"{", "3", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiers", " ", "=", " ", 
     RowBox[{"TrainClassifiersDisjoint", "[", 
      RowBox[{
      "classifiersData", ",", "classifierTypes", ",", "trainingIndices", ",", 
       
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Last", "@", 
            RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
         "classifiersFeatures"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "=", 
     RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
      RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Now", " ", "display", " ", "the", " ", "1", "st", " ", "solution", " ", 
      "on", " ", "the", " ", "left"}], ",", " ", 
     RowBox[{
     "the", " ", "true", " ", "solution", " ", "in", " ", "the", " ", 
      "center"}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "and", " ", "the", " ", "2", "nd", " ", "solution", " ", "on", " ", 
      "the", " ", "right"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IsNotComplexQ", "[", "eval", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"tp1", "=", 
       RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tp2", "=", 
       RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vcbl", "=", 
       RowBox[{"LabelCounts", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reg", "=", 
       RowBox[{"GroundTruthImplicitRegion", "[", 
        RowBox[{"vcbl", ",", 
         RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"points", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], ",", 
            RowBox[{"RegionNearest", "[", 
             RowBox[{"reg", ",", 
              RowBox[{
               RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}]}], 
             "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Comparison", " ", "between", " ", "true", " ", "performance", " ", 
         "and", " ", "the", " ", "estimates"}], " ", "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"points", "//", 
              RowBox[{
               RowBox[{"Transpose", "/@", "#"}], "&"}]}], "//", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", "7"}], "]"}], "&"}]}], "//", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", "1"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 SubscriptBox["P", "\[Alpha]"], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   SubscriptBox["P", "\[Alpha]"], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "/.", 
                 RowBox[{"(", 
                  RowBox[{"eval", "//", "First"}], ")"}]}], "//", "N"}], 
               "}"}], ",", 
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}]}], "//", 
          "Transpose"}], "//", 
         RowBox[{
          RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Grid", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Dividers", "->", "All"}]}], "]"}], "&"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "distances", " ", "of", " ", "the", " ", "two", " ", 
        "independent", " ", "solutions", " ", "from", " ", "the", " ", 
        "universal", " ", "surface"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", "//", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"First", "@", "#"}], "-", 
                RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], "]"}],
            "&"}]}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], ",", "\[IndentingNewLine]", 
     "Nothing"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872227131409071*^9, 3.872227193547657*^9}, {
   3.872227229803397*^9, 3.872227239961542*^9}, {3.872227314360325*^9, 
   3.8722273260202293`*^9}, {3.872227382775607*^9, 3.872227418298526*^9}, {
   3.872227461650676*^9, 3.87222746372779*^9}, {3.87222749452941*^9, 
   3.8722275365155773`*^9}, {3.8722275800225687`*^9, 
   3.8722275808174057`*^9}, {3.872227620273551*^9, 3.872227638117157*^9}, 
   3.872227677433093*^9, {3.8722277183078527`*^9, 3.872227727998815*^9}, {
   3.872227763031468*^9, 3.8722277950779333`*^9}, {3.8722278573531322`*^9, 
   3.8722278595789843`*^9}, 3.87222794221894*^9, {3.872227974994749*^9, 
   3.872228037429139*^9}, {3.8722280755136757`*^9, 3.87222822498263*^9}, {
   3.8722285994912453`*^9, 3.872228635242331*^9}, {3.872228852427012*^9, 
   3.872228899963132*^9}, {3.872229159157515*^9, 3.872229184986931*^9}, {
   3.872229276646233*^9, 3.872229280588162*^9}, 3.872229649215127*^9, {
   3.87222969061078*^9, 3.872229700712111*^9}, {3.872229764296651*^9, 
   3.8722298109552603`*^9}, {3.872229847030231*^9, 3.8722298898222733`*^9}, {
   3.87222995418666*^9, 3.872229991560005*^9}, {3.872230027247669*^9, 
   3.872230064846319*^9}, {3.8722301463309937`*^9, 3.872230175111985*^9}, 
   3.87223023152927*^9, 3.8722302657308064`*^9, {3.872230308740641*^9, 
   3.872230313286141*^9}, {3.872245796678767*^9, 3.8722458012426434`*^9}, 
   3.872245870295103*^9, {3.872245933141944*^9, 3.87224603673029*^9}, 
   3.872246078418956*^9, {3.872246112985475*^9, 3.87224621361215*^9}, {
   3.872246249160623*^9, 3.872246298852219*^9}, {3.8722463304847813`*^9, 
   3.872246355129428*^9}, {3.872246396543681*^9, 3.872246421046482*^9}, {
   3.87224646112115*^9, 3.872246491218321*^9}, {3.872246530799119*^9, 
   3.872246537560668*^9}, {3.872246954720902*^9, 3.8722469560756702`*^9}, {
   3.872247038373595*^9, 3.872247052827866*^9}, {3.872247118453021*^9, 
   3.8722471926877747`*^9}, {3.872247226496471*^9, 3.872247323069315*^9}, {
   3.872247394572092*^9, 3.872247395451879*^9}, {3.872247822199974*^9, 
   3.8722478465414124`*^9}, {3.8722479950358267`*^9, 
   3.8722479957114973`*^9}, {3.8722481434204884`*^9, 
   3.8722481489839363`*^9}, {3.87230688462062*^9, 3.872306885429875*^9}, {
   3.872306941684249*^9, 3.872306942808691*^9}, {3.872311723251595*^9, 
   3.8723117977373543`*^9}, {3.872314548687635*^9, 3.87231455045343*^9}, {
   3.872314595381403*^9, 3.87231459585338*^9}, {3.872826791442507*^9, 
   3.872826804147468*^9}, {3.8728268467639713`*^9, 3.872826849939419*^9}, {
   3.872827043308036*^9, 3.872827201024373*^9}, 3.872827271631947*^9},
 CellLabel->
  "In[3802]:=",ExpressionUUID->"58a55f73-9b82-444d-9650-c7dae73b20be"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.48221661645795194`", "0.48221658979251303`", 
     SubscriptBox["P", "\[Alpha]"], "0.3333333333333333`", 
     "0.517783383542048`", "0.5177833609605246`"},
    {"0.35955366271353073`", "0.3595536140616962`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], "0.543`", "0.530692804620621`", 
     "0.5306927780419844`"},
    {"0.469307195379379`", "0.4693071566029388`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], "0.59925`", "0.6404463372864692`", 
     "0.6404462986343356`"},
    {"0.10135637730238055`", "0.10135632750052517`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], "0.8945`", "0.8986208366991598`", 
     "0.8986208459758499`"},
    {"0.10137916330084022`", "0.10137914926651019`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], "0.676`", "0.8986436226976195`", 
     "0.8986435991989974`"},
    {"0.05984141323719531`", "0.05984136540409041`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], "0.8615`", "0.91571782960894`", 
     "0.9157178258081435`"},
    {"0.08428217039105997`", "0.08428216046880406`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]], "0.67625`", "0.9401585867628047`", 
     "0.9401585530665204`"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Print",
 CellChangeTimes->{
  3.872311800624259*^9, 3.8723145611231956`*^9, {3.872314598443694*^9, 
   3.872314608579821*^9}, 3.872826862358069*^9, {3.872827207274352*^9, 
   3.872827215371702*^9}, 3.8728272767572117`*^9},
 CellLabel->
  "During evaluation of \
In[3802]:=",ExpressionUUID->"3476aafd-99cc-48df-a0b4-e0651380dae6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"9.82105047863421`*^-8", ",", "6.707059269420517`*^-8"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.872227272141127*^9, 3.872227330482872*^9, 3.872227420048933*^9, 
   3.8722274647607403`*^9, 3.8722275385387373`*^9, 3.872227583178496*^9, {
   3.8722276572682877`*^9, 3.8722276854272947`*^9}, {3.872227730564815*^9, 
   3.8722277403324842`*^9}, {3.872227773787674*^9, 3.87222781785011*^9}, 
   3.872227860902836*^9, 3.87222791692391*^9, {3.872228039978078*^9, 
   3.872228043888885*^9}, 3.8722280778959703`*^9, {3.8722282283494587`*^9, 
   3.8722282331751623`*^9}, {3.8722289016563377`*^9, 3.872228911938987*^9}, 
   3.8722289645385103`*^9, 3.8722291868856363`*^9, 3.8722292220627003`*^9, {
   3.872229281891584*^9, 3.872229287654353*^9}, 3.872229329677669*^9, 
   3.872229594304206*^9, 3.872229650812245*^9, 3.872229702277425*^9, 
   3.8722298130028667`*^9, {3.872229863437209*^9, 3.8722298914256983`*^9}, 
   3.872229962390101*^9, 3.872229993276366*^9, 3.872230033933861*^9, 
   3.8722300663273487`*^9, 3.872230234971249*^9, 3.872230266548087*^9, 
   3.8722303150460587`*^9, {3.872245803501156*^9, 3.8722458184080667`*^9}, 
   3.872245871499402*^9, 3.872245954557221*^9, {3.8722459858114243`*^9, 
   3.872246005299776*^9}, {3.8722460378524303`*^9, 3.8722460505653877`*^9}, {
   3.872246090989057*^9, 3.872246119584601*^9}, {3.872246152407845*^9, 
   3.872246214931926*^9}, 3.872246306413001*^9, 3.872246356553173*^9, {
   3.872246412378098*^9, 3.872246422143735*^9}, {3.8722464698417053`*^9, 
   3.872246493643118*^9}, {3.87224653876126*^9, 3.872246559831089*^9}, 
   3.872246590312531*^9, {3.872246629240767*^9, 3.87224664680858*^9}, {
   3.872246687883457*^9, 3.872246786931983*^9}, 3.872246931417836*^9, 
   3.8722470613230257`*^9, {3.872247141789669*^9, 3.8722471939866056`*^9}, 
   3.872247236266238*^9, 3.872247271630959*^9, {3.872247305389071*^9, 
   3.872247336956025*^9}, {3.872247367079818*^9, 3.872247440929593*^9}, {
   3.8722474713483953`*^9, 3.8722475916463118`*^9}, {3.872247673826705*^9, 
   3.872247691874695*^9}, {3.872247750663028*^9, 3.872247776869223*^9}, {
   3.8722478070825863`*^9, 3.8722479667534113`*^9}, {3.8722479970609007`*^9, 
   3.872248057347909*^9}, {3.872248097178546*^9, 3.8722481089111147`*^9}, {
   3.872248150683241*^9, 3.8722482490122967`*^9}, 3.872248454258541*^9, 
   3.872306782960947*^9, {3.872306864490954*^9, 3.872306887273787*^9}, 
   3.8723069446914873`*^9, {3.8723073732730217`*^9, 3.872307402105299*^9}, 
   3.872307512199898*^9, 3.872307548705649*^9, {3.872307594573572*^9, 
   3.8723076103042393`*^9}, {3.8723076613900146`*^9, 3.872307682319813*^9}, {
   3.872307728712488*^9, 3.872307744204255*^9}, 3.872307816197259*^9, {
   3.8723078489089403`*^9, 3.872307867334531*^9}, {3.872311758445497*^9, 
   3.872311800629751*^9}, 3.872314561127286*^9, {3.872314598447526*^9, 
   3.872314608583304*^9}, 3.872826862367175*^9, {3.8728272072829437`*^9, 
   3.872827215380322*^9}, 3.872827276766054*^9},
 CellLabel->
  "Out[3812]=",ExpressionUUID->"d96465c2-7e54-444a-ace0-c8f272ea3cb0"]
}, Open  ]],

Cell["\<\
Notice how the independent solutions for this randomly chosen partition are \
close to the universal surface. Let\[CloseCurlyQuote]s do another run.\
\>", "Text",
 CellChangeTimes->{{3.872827312874922*^9, 
  3.872827347695796*^9}},ExpressionUUID->"228d98a3-3ded-4cd6-8ada-\
85375480de98"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "We", " ", "do", " ", "a", " ", "random", " ", "partition", " ", "of", " ",
     "the", " ", "UCI", " ", "Adult", " ", "features"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"classifiersFeatures", "=", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"uciAdultFeatures", "[", 
           RowBox[{"[", 
            RowBox[{"Complement", "[", 
             RowBox[{
              RowBox[{"Range", "@", "14"}], ",", 
              RowBox[{"{", 
               RowBox[{"1", ",", "10"}], "}"}]}], "]"}], "]"}], "]"}], "//", 
          "\[IndentingNewLine]", "RandomSample"}], "//", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Partition", "[", 
           RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
       "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"Map", "[", 
         RowBox[{"Sort", ",", "#"}], "]"}], "&"}]}], "//", "Sort"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
    "Settings", " ", "for", " ", "training", " ", "and", " ", "testing", " ", 
     "sample", " ", "sizes"}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{"\"\<NaiveBayes\>\"", ",", 
       RowBox[{"{", "3", "}"}]}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runTrainTestSplit", "=", 
     RowBox[{"SelectTrainTestSplit", "[", 
      RowBox[{"globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingIndices", "=", 
     RowBox[{"Transpose", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], "}"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiersData", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"First", "@", 
             RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], "&"}], 
         ",", "runTrainTestSplit", ",", 
         RowBox[{"{", "3", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiers", " ", "=", " ", 
     RowBox[{"TrainClassifiersDisjoint", "[", 
      RowBox[{
      "classifiersData", ",", "classifierTypes", ",", "trainingIndices", ",", 
       
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Last", "@", 
            RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
         "classifiersFeatures"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "=", 
     RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
      RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{"(*", " ", 
    RowBox[{
     RowBox[{
     "Now", " ", "display", " ", "the", " ", "1", "st", " ", "solution", " ", 
      "on", " ", "the", " ", "left"}], ",", " ", 
     RowBox[{
     "the", " ", "true", " ", "solution", " ", "in", " ", "the", " ", 
      "center"}], ",", "\[IndentingNewLine]", 
     RowBox[{
     "and", " ", "the", " ", "2", "nd", " ", "solution", " ", "on", " ", 
      "the", " ", "right"}]}], " ", "*)"}], "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IsNotComplexQ", "[", "eval", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"tp1", "=", 
       RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tp2", "=", 
       RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vcbl", "=", 
       RowBox[{"LabelCounts", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reg", "=", 
       RowBox[{"GroundTruthImplicitRegion", "[", 
        RowBox[{"vcbl", ",", 
         RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"points", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], ",", 
            RowBox[{"RegionNearest", "[", 
             RowBox[{"reg", ",", 
              RowBox[{
               RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}]}], 
             "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", "\[IndentingNewLine]", 
       RowBox[{"(*", " ", 
        RowBox[{
        "Comparison", " ", "between", " ", "true", " ", "performance", " ", 
         "and", " ", "the", " ", "estimates"}], " ", "*)"}], 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"points", "//", 
              RowBox[{
               RowBox[{"Transpose", "/@", "#"}], "&"}]}], "//", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", "7"}], "]"}], "&"}]}], "//", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", "1"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 SubscriptBox["P", "\[Alpha]"], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   SubscriptBox["P", "\[Alpha]"], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "/.", 
                 RowBox[{"(", 
                  RowBox[{"eval", "//", "First"}], ")"}]}], "//", "N"}], 
               "}"}], ",", 
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}]}], "//", 
          "Transpose"}], "//", 
         RowBox[{
          RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Grid", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Dividers", "->", "All"}]}], "]"}], "&"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"(*", " ", 
       RowBox[{
       "The", " ", "distances", " ", "of", " ", "the", " ", "two", " ", 
        "independent", " ", "solutions", " ", "from", " ", "the", " ", 
        "universal", " ", "surface"}], " ", "*)"}], "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", "//", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"First", "@", "#"}], "-", 
                RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], "]"}],
            "&"}]}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], ",", "\[IndentingNewLine]", 
     "Nothing"}], "]"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872227131409071*^9, 3.872227193547657*^9}, {
   3.872227229803397*^9, 3.872227239961542*^9}, {3.872227314360325*^9, 
   3.8722273260202293`*^9}, {3.872227382775607*^9, 3.872227418298526*^9}, {
   3.872227461650676*^9, 3.87222746372779*^9}, {3.87222749452941*^9, 
   3.8722275365155773`*^9}, {3.8722275800225687`*^9, 
   3.8722275808174057`*^9}, {3.872227620273551*^9, 3.872227638117157*^9}, 
   3.872227677433093*^9, {3.8722277183078527`*^9, 3.872227727998815*^9}, {
   3.872227763031468*^9, 3.8722277950779333`*^9}, {3.8722278573531322`*^9, 
   3.8722278595789843`*^9}, 3.87222794221894*^9, {3.872227974994749*^9, 
   3.872228037429139*^9}, {3.8722280755136757`*^9, 3.87222822498263*^9}, {
   3.8722285994912453`*^9, 3.872228635242331*^9}, {3.872228852427012*^9, 
   3.872228899963132*^9}, {3.872229159157515*^9, 3.872229184986931*^9}, {
   3.872229276646233*^9, 3.872229280588162*^9}, 3.872229649215127*^9, {
   3.87222969061078*^9, 3.872229700712111*^9}, {3.872229764296651*^9, 
   3.8722298109552603`*^9}, {3.872229847030231*^9, 3.8722298898222733`*^9}, {
   3.87222995418666*^9, 3.872229991560005*^9}, {3.872230027247669*^9, 
   3.872230064846319*^9}, {3.8722301463309937`*^9, 3.872230175111985*^9}, 
   3.87223023152927*^9, 3.8722302657308064`*^9, {3.872230308740641*^9, 
   3.872230313286141*^9}, {3.872245796678767*^9, 3.8722458012426434`*^9}, 
   3.872245870295103*^9, {3.872245933141944*^9, 3.87224603673029*^9}, 
   3.872246078418956*^9, {3.872246112985475*^9, 3.87224621361215*^9}, {
   3.872246249160623*^9, 3.872246298852219*^9}, {3.8722463304847813`*^9, 
   3.872246355129428*^9}, {3.872246396543681*^9, 3.872246421046482*^9}, {
   3.87224646112115*^9, 3.872246491218321*^9}, {3.872246530799119*^9, 
   3.872246537560668*^9}, {3.872246954720902*^9, 3.8722469560756702`*^9}, {
   3.872247038373595*^9, 3.872247052827866*^9}, {3.872247118453021*^9, 
   3.8722471926877747`*^9}, {3.872247226496471*^9, 3.872247323069315*^9}, {
   3.872247394572092*^9, 3.872247395451879*^9}, {3.872247822199974*^9, 
   3.8722478465414124`*^9}, {3.8722479950358267`*^9, 
   3.8722479957114973`*^9}, {3.8722481434204884`*^9, 
   3.8722481489839363`*^9}, {3.87230688462062*^9, 3.872306885429875*^9}, {
   3.872306941684249*^9, 3.872306942808691*^9}, {3.872311723251595*^9, 
   3.8723117977373543`*^9}, {3.872314548687635*^9, 3.87231455045343*^9}, {
   3.872314595381403*^9, 3.87231459585338*^9}, {3.872826791442507*^9, 
   3.872826804147468*^9}, {3.8728268467639713`*^9, 3.872826849939419*^9}, {
   3.872827043308036*^9, 3.872827201024373*^9}, 3.872827271631947*^9},
 CellLabel->
  "In[3835]:=",ExpressionUUID->"48cb8626-1d94-4954-b197-e6314d890d6e"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.40794245180883226`", "0.46520717390900734`", 
     SubscriptBox["P", "\[Alpha]"], "0.3333333333333333`", 
     "0.5920575481911678`", "0.5347973321498822`"},
    {
     RowBox[{"-", "0.2218205879730683`"}], "0", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], "0.868`", "1.0049530427189075`", 
     "0.9433480002879621`"},
    {
     RowBox[{"-", "0.004953042718907484`"}], "0.05664402608380296`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], "0.67725`", "1.2218205879730684`", 
     "0.9999999855475734`"},
    {"0.17112551096063633`", "0.18545264756640695`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], "0.6095`", "0.4414390238868412`", 
     "0.4579084261062726`"},
    {"0.5585609761131589`", "0.5420791852863154`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], "0.808`", "0.8288744890393638`", 
     "0.8145357569986995`"},
    {"0.13244851827048038`", "0.16489335527344395`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], "0.8265`", "0.7445255303278346`", 
     "0.7818278688995544`"},
    {"0.2554744696721654`", "0.21815749076384297`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]], "0.671`", "0.8675514817295197`", 
     "0.8350958021733275`"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Print",
 CellChangeTimes->{{3.8728273608857813`*^9, 3.8728273749505463`*^9}},
 CellLabel->
  "During evaluation of \
In[3835]:=",ExpressionUUID->"efe9b12e-ef99-40a1-9f87-6f9d99e16ec9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.2433104214089219`", ",", "0.24331043812133424`"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.872827360894115*^9, 3.87282737495914*^9}},
 CellLabel->
  "Out[3845]=",ExpressionUUID->"db134067-7929-427d-8726-f1c3a4ad4184"]
}, Open  ]],

Cell["\<\
This is an example of a trio of classifiers that are clearly not error \
independent on the test sample. Real, out of bounds values are being returned \
for some of the classifiers.\
\>", "Text",
 CellChangeTimes->{{3.872827385961733*^9, 
  3.872827434603199*^9}},ExpressionUUID->"3729d3c7-5572-4e69-8c7a-\
9a9ca90d6c05"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scanning for feature partitions that minimize that distance", "Section",
 CellChangeTimes->{{3.872226274509672*^9, 3.8722263257348013`*^9}, {
  3.872226458081524*^9, 
  3.872226458556469*^9}},ExpressionUUID->"b9e16553-5fb1-401c-aff0-\
29a98f2b8bdd"],

Cell["\<\
We can now test proposed disjoint feature partitions and see how far their \
independent solution is from the universal surface.\
\>", "Text",
 CellChangeTimes->{{3.872827469955632*^9, 
  3.87282751765065*^9}},ExpressionUUID->"e96a30af-dfb5-4cd3-9c4b-\
cade1bfd09da"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"featurePartitions", "=", 
   RowBox[{
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"uciAdultFeatures", "[", 
            RowBox[{"[", 
             RowBox[{"Complement", "[", 
              RowBox[{
               RowBox[{"Range", "@", "14"}], ",", 
               RowBox[{"{", 
                RowBox[{"1", ",", "10"}], "}"}]}], "]"}], "]"}], "]"}], "//", 
           "\[IndentingNewLine]", "RandomSample"}], "//", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "3"}], "]"}], "&"}]}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{"Sort", ",", "#"}], "]"}], "&"}]}], "//", "Sort"}], ",", 
      RowBox[{"{", "1000", "}"}]}], "]"}], "//", "DeleteDuplicates"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "@", "featurePartitions"}]}], "Input",
 CellChangeTimes->{{3.872307884880126*^9, 3.872307925637602*^9}},
 CellLabel->"In[99]:=",ExpressionUUID->"da31fe1b-26b7-4e6a-9d25-59a51b996a7a"],

Cell[BoxData["994"], "Output",
 CellChangeTimes->{{3.872307927342813*^9, 3.872307934373128*^9}, 
   3.872314628480394*^9},
 CellLabel->
  "Out[100]=",ExpressionUUID->"4dcbce36-2c3f-49a4-a873-54e2c5431042"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"searchDS", "=", "globalTrainTestSplit"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nTestAlpha", "=", "1000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nTrain", "=", "1800"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"classifierTypes", " ", "=", " ", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"\"\<LogisticRegression\>\"", ",", 
        RowBox[{"\"\<L1Regularization\>\"", "->", "0.1"}], ",", 
        RowBox[{"\"\<L2Regularization\>\"", "->", "0.5"}], ",", 
        RowBox[{"\"\<OptimizationMethod\>\"", "->", "\"\<Newton\>\""}]}], 
       "}"}], ",", 
      RowBox[{"{", "nClassifiers", "}"}]}], "]"}]}], ";"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"classifiersFeatures", "=", 
     RowBox[{"featurePartitions", "[", 
      RowBox[{"[", 
       RowBox[{"RandomChoice", "@", "stage2Partitions"}], "]"}], "]"}]}], 
    ";"}], " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"runs", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"runTrainTestSplit", "=", 
       RowBox[{"SelectTrainTestSplit", "[", 
        RowBox[{"searchDS", ",", "nTestAlpha", ",", "nTrain"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"trainingIndices", "=", 
       RowBox[{"Transpose", "@", 
        RowBox[{"{", "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"RandomSample", "[", 
             RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Floor", "[", 
                RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
             "&"}]}], "//", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
          "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{
            RowBox[{"RandomSample", "[", 
             RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", 
               RowBox[{"Floor", "[", 
                RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
             "&"}]}], "//", 
           RowBox[{
            RowBox[{"Take", "[", 
             RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], "}"}]}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"classifiersData", "=", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"#", "[", 
             RowBox[{"[", 
              RowBox[{"First", "@", 
               RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], "&"}], 
           ",", "runTrainTestSplit", ",", 
           RowBox[{"{", "3", "}"}]}], "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
      ";", "\[IndentingNewLine]", 
      RowBox[{"classifiers", " ", "=", " ", 
       RowBox[{"TrainClassifiersDisjoint", "[", 
        RowBox[{
        "classifiersData", ",", "classifierTypes", ",", "trainingIndices", 
         ",", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{"Last", "@", 
              RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
           "classifiersFeatures"}], "]"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vcbl", "=", 
       RowBox[{"LabelCounts", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", "\[IndentingNewLine]", 
      RowBox[{"eval", "=", 
       RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"IsNotComplexQ", "[", "eval", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"tp1", "=", 
          RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"tp2", "=", 
          RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"reg", "=", 
          RowBox[{"GroundTruthImplicitRegion", "[", 
           RowBox[{"vcbl", ",", 
            RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"points", "=", 
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"{", 
              RowBox[{
               RowBox[{
                RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], 
               ",", 
               RowBox[{"RegionNearest", "[", 
                RowBox[{"reg", ",", 
                 RowBox[{
                  RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}]}],
                 "]"}]}], "}"}], "&"}], ",", 
            RowBox[{"{", 
             RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{"points", "//", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{
                   RowBox[{"First", "@", "#"}], "-", 
                   RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], 
               "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
               RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
           RowBox[{
            RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
          RowBox[{
           RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], ",", "\[IndentingNewLine]",
         "Nothing"}], "]"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"classifiersFeatures", ",", 
       RowBox[{"featurePartitions", "//", 
        RowBox[{
         RowBox[{"RandomSample", "[", 
          RowBox[{"#", ",", "10"}], "]"}], "&"}]}]}], "}"}], ",", 
     RowBox[{"{", "20", "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872307945267033*^9, 3.872308036769537*^9}, {
   3.872308070713026*^9, 3.872308150349695*^9}, {3.872308199844627*^9, 
   3.872308219435268*^9}, {3.8723110787720003`*^9, 3.872311190330472*^9}, {
   3.872311837252905*^9, 3.872311866075659*^9}, {3.872311911945546*^9, 
   3.8723119125733147`*^9}, {3.872312000695552*^9, 3.872312005800097*^9}, {
   3.872314695075979*^9, 3.8723147748489523`*^9}, {3.8723148113004913`*^9, 
   3.872314814883875*^9}},
 CellLabel->
  "In[107]:=",ExpressionUUID->"8325179c-c3c3-4c03-80e1-e3873b8c1fc3"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"runs", "//", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"#", ",", 
     RowBox[{"AspectRatio", "->", "1"}]}], "]"}], "&"}]}]], "Input",
 CellChangeTimes->{{3.872311945413265*^9, 3.872311963153932*^9}, {
  3.872312031067046*^9, 3.872312044102066*^9}},
 CellLabel->
  "In[113]:=",ExpressionUUID->"7cb3a2e1-22b0-48eb-94d4-19ca899554a2"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.009166666666666668], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwt1nk0lWsXAHBRyRB9lEoRKvOcKWk/dCsyZIhkKGRIIs5xzntG5xwihXJK
5jJFJeXSoRIqUxmiG1EyRCo3kTQiw/e+3/qetfb6/bHX/mOvZ+29tvLRcJdA
YSEhoWY8CGW9DBZynZ6gHv/xTXm4ZqfKt7q1sEDo/89Le+iL1hEBEinJ+Ez4
qDj63JQ6D4KtNZgVUjz4/Hr3OsPt0Yj16u5dPdxz353lNhmVoUsN84gwXkwl
YIslG7RbmKVFuhxgVA3lD7fHIU+5u6LvcQfuK83MpQmQXcYRxXlcNKAUttgn
QG0HqtsJ35hxv3Uu4YBfXOCFR0u5cCczNOixFgeWFK68QuqKgrlAsx6r3fdQ
QFb9AuFbFBFq850BDSnKLf1CTDAV01Ao1C1En2XCdAntdWzyi8gCZOFfUXkN
N9s2yI2/TICa+/SPEVZxtN9IeRSiQ6e8SdK46nN8b+PmctSzrIdLGDM7N6ok
fhNJWswfVMb9VEOKobBosDdn7XTpXRqEtyaHJiwlwcT+o6/N3pFBZq5Rb2UG
FR4Vn4sOxy06dZ3iEEIBhXfK/vCHDDHHqhND7ElQqLa78kMyGaYF6x91kCmQ
RffLvBFPgXS7JkXdkQy0Xt3BRg/333iempIyA5L2bTC1qaNDmkqoub4JDXSU
SlOEfkZCl8esmDSXDOr+WMqSJTRIGfBQFBuNhIX+233mbhTI4JcMZOzEIMVi
2kzIhQpH74i/tsMYUFqXGt4UwwBj26WnrDUYMK6wmW+ylwGyiRUsqg4D6Pai
TNN9dAgWNhdTqw+Bg3FAGn7OhFUK+0e/7YmA5vYu+uuNdFiumZ01v50JjsrT
6Sr5TNCUE9i8SKSAvIgi5qdIgk0iGw/ZStEgwE7P+OUPGlz4Mdp5drYR/bi9
q41wMPq9pcgiH4XXfvElrEtbSNGLrkA5qWNZhOy0o8mcLWxIwUKNHCbYcCOV
dehL2kv054meB6H0HconycNM4L8yof46yYRbuuVuVplMSLUrtL29mQaN9B75
4isC9MOpceYG7r29hx+0d1eh88GjcYSZ46e1I1Z0o4jxFD1C7cWa5MBAFjzJ
ky7+jywT6LWrrarkMDCoXDE2eYkCR+hBnLyvDPiuMdwRXMCAkBi/uJQuKnjk
zLJ/FlOgPI29tdC9CRlMOKgSLgl89f3Lv3RY0FtTnDdLByP3FGeVbZ0o+Cj/
f750VNTRnKxBLQXx+oTfvhqWu/SywVHxudLmIjbMTKk9+dXcj2Cu938Wd9no
evieRjJ2LW/ccTf0eC68leaBTEWl1YcjHNjsLW+/XYoDN1cXrAnezoXLNWHv
in5yID8g58b4IAdsJTb2tP2didpuXOgn1N1FvhV9CkOaJSNKhJnKqg3NrVy4
OKAtF+zMA6XuSnrgfQ5qLWmXCcK9IEOzWhAloyT3scFpXPUHBsihNQUNr/vz
mPCpjlzQz99+KOlwbv4o7noWx7JUIhKGy461+dK5EHuF32ldHINM7FQwG9yA
5Hg3IUke9IWHuJpY8ODN8VWBsYtRUP3w26D1AgvaNPXNTU9EooaxE+8McftG
s3yPeyajQcVsY8I7x3t8DHTOInljnxB93HfV9vF7NvFg57uKeI8MLkjpj62o
28mF1Z5fD4UkswFlN1RlrYiEL4Xt5S5rI8G5RzATb86A+pjwjoQZBswbB01s
08WgNu3s720NVHBxHs5kqlBhas2ldR8mqVAeETqBHrFgxc2nXSd/M8HeUONb
rD4FdgtZ1qhr0aFybLmyDgMD8VtFh5ZZRULAqVTHkzkM2HdZbrWgJgBqVHd+
5blToee0BiVVjwZCChKzk2FM4Apnk8GTCbXbjEnMVBokzNqcvSmDz1ecqaSr
IgeulmdsMJblAF3ZJjB6BoNjIuXrC6KoQAuaCXIM7EQRO0P8CY2m67fKr6HC
iC1v2FmCCk9rnndCNh328LyKZ37R4Er927Dd4iRwXT7XOsalQSXns7Z6LRPK
ad65LdtYECs3FXW8H++bazbnI0mDqTOcGw3DGKysi9X8618MLgetvPjEOwrI
/ombqt3YQA0qio6zoqC4P3ZbCIXFmK8oKj4wtusDqzOBCx/n1IRnkirQx2FT
acL7LHfBZGYC8rcNoX3DtfO47FcizoEt/d7DwvVR8FhF9Os6cy4EvMwL3NvO
BfMj8XWam88hWaXzW3Rxta21h5OSWTAVV+M72UkGhfNtThDLBeVS7/BYVR6s
upTH+GUfBfyMHIdvWVFwLLFlPug7B9pPeI7sHuRCm8q6Ne7jUSD755nW4lQU
iHI0zzweykMvfqRkEuqdfl566gkH1s57SC85yIMciY8fTjxMRkt8p8nHcZ07
HbOjU46hlquqf8fjrt2b3dixMhWJ5I7JEPLkJZZqJ/DRq6029zRxr9PlxOkW
XHiRsyDrif/fD2oH+ZdmLqq4V5lDWNoUum7CPQ8t8/ptRHhWP8ziwPpYZKWz
rIbQsjDVTcU+F7knDiQQJqNQ2krrBPTapXtKHJd2Nyq3I/0iGvZOsiN0dNlx
lNMTgdrrBBHRuKqVwlN3Vuei9ulcRQEuXxuChLtjUMNAYdfiyxhU9Pltouv3
YuQ4S17hhus2aFh5dAjfF/fy9xWH88BgStL4fFUF4jE93AjDrUQ91Ieykb6q
XhbhxTuOdSTRM4iief4FBfdqeP2vAsN8pOBMWnUVdzi8vIHaeh7xfh9NpuDm
N3JOUnMeolFy3CFC62x/+e3hp5FnWt8BM1y9J7QsvqAQFbQOTCfjGi9kH/tQ
VoamVzj/RVh8MkmzyQsD6uiy1j3dVFD6R8NpsIQFk7ItVXsfM2Gu8KBq9Csq
5PB9XFv3Y+C8cKjlmRQdagoflVwDJmwZnyH3+mHwz5TVuKUWBgXXvPUrn9JB
cUlEfdoDDBD0KIXvI4OIcI1xxXIaPLV8trm5ngXV/2idedPEgs+LKR4TaVHg
dYZNv1UQBSbdzpeKdtChQdMk3jCWDgY3b0u0RtLAcn9vu7dwJDzIgk+mLmQ4
/30H6zCPCsauPgN8URZYYwo77SVZcK9sua+fHRtGzKScuzzZoDpi6pSlyAJR
O+nvFC0W2J+Wa/ybHQVX6at4mtNsWPvmYW3MvkjYqT/29cVrMuTFjKSRd2Cg
0BHhoqKBQW91//yEKA3WvxTuVaNisPHZOXY5mwJ6fafUEmIpEG6udtUpjgrV
hZ97p4OpwD/+Kf2yPRumqgt4vuJskALZUbInBmUTPgExxRgEb9XTcnpPBdfr
oku3m1MgyXJE9gR+91zqPSyWbYzvtRPSZFCjw0f1I4cnttOhS1bfaP4PCbxS
Dlvlp1Pg+bn6fTXHGHBLO7owrZUJyz9lhCiyWPA2rNZlwIkFtplDRv82UeH3
m+PSxR+pwLv/cDbJGoOXpU0LJhcwiD2QpLdGgQ2eK2UPMizY4KDFO8Mwo8Cu
Yc7iqCEDSuYUJGa0GLDD6+Lj+2EscJCWVNhahtelVX6QDKTDrS5jUsQeKgTv
XjXvy6VC4cZsI30OBYoeCdeWOwfC27dJtUlDGIxaBc3w8Dvl96qS0FFPGvzV
/Wzwly4NkkmNV0L+YDB4PjGmxQODcum8M/bFZEgRnfEvKiIDNimxZ9KODHcr
0hXDL0dAkmvps46pCDhQg3YpyJDAZ9WBBcF6Kgw3jKTb+IVCn7OgYo1+BFCL
0xNjQkhQyT+r6/aTBG9UVJoN2ikwNDn4YY8lGTq2VU0k9ZNAljGrPKMfCd0i
Lhi8IoMpP1usyTYSDASG4wOnycB6f6XqZC4VEq3f0aqzKMCuUvLsEyHDToPr
6u8XIkDjkMQ1fjkNyh43UqReYdB9k33OsggDk6Kn5psqMUhYGLlO0qeBj0WJ
sNxeCiiq20jrhT5HJ8VKNhBOvRuSXpyNhNG3MqPu4hSY2eLpYehAAZEwI4uE
7WTo36zg6a1DBuuKT/J3zoZBwe210hUDNKBkX+Lb0unw1WsTq7IOz7+XiREe
IcF/AcHpzq4=
     "]]}, {{}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.07588087689440812}, {0, 0.0758808858708725}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.872311955559744*^9, 3.872311965287731*^9}, 
   3.872312394088483*^9, 3.872315472275614*^9},
 CellLabel->
  "Out[113]=",ExpressionUUID->"d021aff5-9c67-4e78-aeaf-c294e998838a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Length", "/@", "runs"}]], "Input",
 CellChangeTimes->{{3.872312602899455*^9, 3.8723126073458557`*^9}},
 CellLabel->
  "In[116]:=",ExpressionUUID->"de3cfe84-3f9c-4329-b095-84a3c7de566f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",",
    "20", ",", "20", ",", "20"}], "}"}]], "Output",
 CellChangeTimes->{3.87231260851545*^9, 3.8723154971781263`*^9},
 CellLabel->
  "Out[116]=",ExpressionUUID->"ece51fe1-8429-452f-9819-185cd5aacc42"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Scanning through all the partitions", "Subsubsection",
 CellChangeTimes->{{3.872312575774864*^9, 
  3.872312587287774*^9}},ExpressionUUID->"eaa44479-8592-40b7-9b47-\
447ce239a351"],

Cell["\<\
We want to find the best feature partitions. We have no idea how the \
partitions are doing on the unlabeled data but we can test how far the \
independent solution is straying from the ground truth surface. To make the \
search efficient, we want to eliminate about half our candidates each time. \
Let\[CloseCurlyQuote]s see how many trials we have to do on this data to \
discover outright failures.\
\>", "Text",
 CellChangeTimes->{{3.872313240691536*^9, 
  3.872313374845724*^9}},ExpressionUUID->"7f18e5f7-57c5-4a10-82ef-\
b0b70a429804"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"searchDS", "=", "globalTrainTestSplit"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"classifierTypes", " ", "=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\"\<LogisticRegression\>\"", ",", 
       RowBox[{"\"\<L1Regularization\>\"", "->", "0.1"}], ",", 
       RowBox[{"\"\<L2Regularization\>\"", "->", "0.5"}], ",", 
       RowBox[{"\"\<OptimizationMethod\>\"", "->", "\"\<Newton\>\""}]}], 
      "}"}], ",", 
     RowBox[{"{", "nClassifiers", "}"}]}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"runs", "=", 
   RowBox[{"Table", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"vals", "=", 
       RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
      RowBox[{"For", "[", 
       RowBox[{
        RowBox[{"i", "=", "0"}], ",", 
        RowBox[{"i", "<", "5"}], ",", 
        RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"runTrainTestSplit", "=", 
          RowBox[{"SelectTrainTestSplit", "[", 
           RowBox[{"searchDS", ",", "nTestAlpha", ",", "nTrain"}], "]"}]}], 
         ";", "\[IndentingNewLine]", 
         RowBox[{"trainingIndices", "=", 
          RowBox[{"Transpose", "@", 
           RowBox[{"{", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{
               RowBox[{"RandomSample", "[", 
                RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
               RowBox[{
                RowBox[{"Partition", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                "&"}]}], "//", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{
               RowBox[{"RandomSample", "[", 
                RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
               RowBox[{
                RowBox[{"Partition", "[", 
                 RowBox[{"#", ",", 
                  RowBox[{"Floor", "[", 
                   RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                "&"}]}], "//", 
              RowBox[{
               RowBox[{"Take", "[", 
                RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], 
            "}"}]}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"classifiersData", "=", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"#", "[", 
                RowBox[{"[", 
                 RowBox[{"First", "@", 
                  RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], 
               "&"}], ",", "runTrainTestSplit", ",", 
              RowBox[{"{", "3", "}"}]}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], 
           "]"}]}], ";", "\[IndentingNewLine]", 
         RowBox[{"classifiers", " ", "=", " ", 
          RowBox[{"TrainClassifiersDisjoint", "[", 
           RowBox[{
           "classifiersData", ",", "classifierTypes", ",", "trainingIndices", 
            ",", 
            RowBox[{"Map", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"(", 
                RowBox[{"Last", "@", 
                 RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
              "classifiersFeatures"}], "]"}]}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"vcbl", "=", 
          RowBox[{"LabelCounts", "[", 
           RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"(*", " ", 
          RowBox[{
          "The", " ", "algebraic", " ", "evaluation", " ", "cannot", " ", 
           "work", " ", "unless", " ", "all", " ", "8", " ", "voting", " ", 
           "patterns", " ", "are", "\[IndentingNewLine]", 
           RowBox[{"observed", ".", " ", "Any"}], " ", "one", " ", "of", " ", 
           "them", " ", "being", " ", "absent", " ", "is", " ", "a", " ", 
           "clear", " ", "signal", " ", "the", " ", "classifiers", 
           "\[IndentingNewLine]", "are", " ", "too", " ", "correlated", " ", 
           "in", " ", "the", " ", "sample"}], " ", "*)"}], 
         "\[IndentingNewLine]", 
         RowBox[{"eval", "=", 
          RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
           RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
         "\[IndentingNewLine]", 
         RowBox[{"If", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"IsNotComplexQ", "[", "eval", "]"}], "&&", 
            RowBox[{"Not", "@", 
             RowBox[{"MatchQ", "[", 
              RowBox[{"eval", ",", 
               RowBox[{"{", 
                RowBox[{"_", ",", 
                 RowBox[{"{", 
                  RowBox[{"{", "}"}], "}"}]}], "}"}]}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"tp1", "=", 
             RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"tp2", "=", 
             RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"reg", "=", 
             RowBox[{"GroundTruthImplicitRegion", "[", 
              RowBox[{"vcbl", ",", 
               RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"points", "=", 
             RowBox[{"Map", "[", 
              RowBox[{
               RowBox[{
                RowBox[{"{", 
                 RowBox[{
                  RowBox[{
                   RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], 
                  ",", 
                  RowBox[{"RegionNearest", "[", 
                   RowBox[{"reg", ",", 
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", 
                    "N"}]}], "]"}]}], "}"}], "&"}], ",", 
               RowBox[{"{", 
                RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"vals", ",", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"points", "//", 
                  RowBox[{
                   RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], "-", 
                    RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], 
                    "]"}], "&"}]}], "//", 
                 RowBox[{
                  RowBox[{"Map", "[", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
               RowBox[{
                RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
      "\[IndentingNewLine]", "vals"}], ",", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{"classifiersFeatures", ",", 
       RowBox[{"featurePartitions", "//", 
        RowBox[{
         RowBox[{"Take", "[", 
          RowBox[{"#", ",", "All"}], "]"}], "&"}]}]}], "}"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872307945267033*^9, 3.872308036769537*^9}, {
   3.872308070713026*^9, 3.872308150349695*^9}, {3.872308199844627*^9, 
   3.872308219435268*^9}, {3.8723110787720003`*^9, 3.872311190330472*^9}, {
   3.872311837252905*^9, 3.872311866075659*^9}, {3.872311911945546*^9, 
   3.8723119125733147`*^9}, {3.872312000695552*^9, 3.872312005800097*^9}, {
   3.872312625443328*^9, 3.872312640037829*^9}, {3.8723127457598467`*^9, 
   3.872312800968514*^9}, {3.8723128317478237`*^9, 3.872312833225493*^9}, {
   3.872312968137534*^9, 3.872313028959404*^9}, {3.872313128380877*^9, 
   3.8723132257545*^9}, 3.872313708644004*^9, {3.872313916362393*^9, 
   3.872313917301602*^9}, {3.872313957615117*^9, 3.8723139905837193`*^9}, {
   3.8723155052065573`*^9, 3.8723155137118473`*^9}, 3.872315548189294*^9, {
   3.872323244490177*^9, 3.87232327646557*^9}, {3.8723233128815928`*^9, 
   3.872323331145681*^9}, {3.872323374092197*^9, 3.872323407407041*^9}, {
   3.872323447598748*^9, 3.872323477326436*^9}, {3.872323530883313*^9, 
   3.872323584766015*^9}, {3.872827606986556*^9, 
   3.872827608605957*^9}},ExpressionUUID->"f2371c2d-0c4b-44d6-b3ff-\
7d181cc4c3b4"],

Cell[BoxData["$Aborted"], "Output",
 CellChangeTimes->{3.872342308494478*^9},
 CellLabel->
  "Out[336]=",ExpressionUUID->"265e55f1-6f8b-4812-8640-92c0ed906ebc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"runs", "//", 
    RowBox[{
     RowBox[{"Length", "/@", "#"}], "&"}]}], "//", "Counts"}], "//", 
  "KeySort"}]], "Input",
 CellChangeTimes->{{3.8723128197285147`*^9, 3.872312820426942*^9}, {
  3.8723130672026157`*^9, 3.8723130831575813`*^9}, {3.872313649056642*^9, 
  3.872313655021532*^9}, {3.872323174959882*^9, 3.872323179045004*^9}},
 CellLabel->
  "In[164]:=",ExpressionUUID->"a9a25450-c9ab-41ed-8a69-d1f80a5da112"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"0", "\[Rule]", "7"}], ",", 
   RowBox[{"1", "\[Rule]", "5"}], ",", 
   RowBox[{"2", "\[Rule]", "7"}], ",", 
   RowBox[{"3", "\[Rule]", "9"}], ",", 
   RowBox[{"4", "\[Rule]", "5"}], ",", 
   RowBox[{"5", "\[Rule]", "961"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.872323302112352*^9, 3.8723234316751137`*^9, 
  3.872323503104247*^9, 3.872323566422933*^9, 3.872340080791153*^9},
 CellLabel->
  "Out[164]=",ExpressionUUID->"7e917f0b-dd20-4449-aa2a-d400bbe04c00"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"runs", "//", 
      RowBox[{
       RowBox[{"Select", "[", 
        RowBox[{"#", ",", 
         RowBox[{
          RowBox[{
           RowBox[{"Length", "@", "#"}], "==", "5"}], "&"}]}], "]"}], "&"}]}],
      "//", 
     RowBox[{
      RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
    RowBox[{
     RowBox[{"Min", "/@", "#"}], "&"}]}], "//", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"#2", "[", 
          RowBox[{"[", "1", "]"}], "]"}], ",", "#1"}], "}"}], "&"}], ",", 
      "#"}], "]"}], "&"}]}], "//", 
  RowBox[{
   RowBox[{"Select", "[", 
    RowBox[{"#", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Last", "@", "#"}], "<", "0.000000007"}], "&"}]}], "]"}], 
   "&"}]}]], "Input",
 CellChangeTimes->{{3.872323194784593*^9, 3.872323198226541*^9}, {
  3.872340265556134*^9, 3.872340341842396*^9}, {3.8723410860802717`*^9, 
  3.872341096203158*^9}, {3.872341344342844*^9, 3.872341367566367*^9}, {
  3.872341407302104*^9, 3.872341476957762*^9}, {3.872341514056353*^9, 
  3.872341561289691*^9}, {3.8723430170535927`*^9, 3.8723430383217297`*^9}},
 CellLabel->
  "In[474]:=",ExpressionUUID->"68699d07-db76-4e10-beb9-6c2eb3c8d78b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"49", ",", "8.80653025892552`*^-10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"54", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"70", ",", "1.5121464055901456`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"79", ",", "5.3625059740053756`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"86", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"173", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"198", ",", "8.012183207815253`*^-10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"258", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"363", ",", "4.4793177337262375`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"375", ",", "5.876181441465867`*^-10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"467", ",", "6.816547142982863`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"589", ",", "1.844178105563666`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"591", ",", "2.5886811419838234`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"597", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"639", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"707", ",", "2.9483610324145023`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"771", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"776", ",", "5.187446543590306`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"783", ",", "6.889838031276132`*^-9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"874", ",", "0.`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"911", ",", "0.`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{
  3.872340288896731*^9, 3.87234034332157*^9, 3.8723410972400723`*^9, 
   3.872341370610663*^9, {3.872341441489616*^9, 3.872341477849361*^9}, {
   3.872341551700725*^9, 3.872341562019313*^9}, {3.8723430315606937`*^9, 
   3.872343039854714*^9}},
 CellLabel->
  "Out[474]=",ExpressionUUID->"e5c8c8b7-71f3-4cf4-b963-3796248b7915"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"featurePartitions", "[", 
  RowBox[{"[", "54", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.872341684444858*^9, 3.8723416885085983`*^9}, {
  3.872343055911395*^9, 3.8723430590843782`*^9}},
 CellLabel->
  "In[475]:=",ExpressionUUID->"d9cc5ed6-7d43-49d7-aa1b-5725f3c0b7bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "\<\"Nominal\"\>"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.872341690872263*^9, 3.872343059984923*^9},
 CellLabel->
  "Out[475]=",ExpressionUUID->"32fc2204-c830-4979-a003-0d35b14e6172"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["runs"], "Input",
 CellChangeTimes->{{3.8723232162619753`*^9, 3.872323216757792*^9}},
 CellLabel->
  "In[157]:=",ExpressionUUID->"73f565cd-bfbe-48cc-a3e6-250d864288e4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.027449982769860194`", ",", "0.027449959115233326`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"0.003706217030281786`", ",", "0.0037062133386365826`"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"0.003042438344982974`", ",", "0.0030424118651237865`"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"0.03696417413778891`", ",", "0.03696417702122152`"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"1.0313949364098849`*^-7", ",", "1.0244284613477907`*^-7"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"0.0711846167636302`", ",", "0.07118461911535835`"}], "}"}]}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.872323217645569*^9, 3.872323305765592*^9, 
  3.872323435550065*^9, 3.8723235068376303`*^9, 3.872323571137917*^9},
 CellLabel->
  "Out[157]=",ExpressionUUID->"07ffa79a-2415-4eb0-b580-76aa3a7020ac"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"runs", "//", 
   RowBox[{
    RowBox[{"Flatten", "[", 
     RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
  RowBox[{
   RowBox[{"ListPlot", "[", 
    RowBox[{"#", ",", 
     RowBox[{"AspectRatio", "->", "1"}]}], "]"}], "&"}]}]], "Input",
 CellLabel->
  "In[603]:=",ExpressionUUID->"96ebd1d7-e455-454d-8e1e-88c62674ad77"],

Cell[BoxData[
 GraphicsBox[{{}, 
   {RGBColor[0.368417, 0.506779, 0.709798], PointSize[0.011000000000000001`], 
    AbsoluteThickness[1.6], PointBox[CompressedData["
1:eJwd0mtUkwUAxvGhMIVOoBzABFGYeg4hcISKmcjzghZNgyHKdd6QRcAYImzv
ruzCyZPNJEU08IZ6tgYJEeCFcQkB0SDRcRDxmoq5BLkoF0GQSe/68Jzfp+fb
3zMpc0vyHBqNFkHNovLq2Ym0ASU8L8cnseJV+HZb9UuT6xnidH7p7xZTIvVO
8hQFugMnOFfe5yA6SjJcWK1A7SHXEIKvgMzR3+jsooIbh8FVb1Bjn7JuKIIu
hfZk37W8KQlOZluVTS6UIDzt3Lr+cBl6uEvpBSoJki6tuPAkVYplupGBkqCj
xIGoqthSyps9gqoWFzF8yl+mds6IUD4qHzztJcSttFb6vEAxjIXTAy4cEVTL
ek4doVzg8oUnOyIHM1bF1mDngO3KOR4SGgO538mt/D0isJPcWCPeJNaNijlX
WEJ80pnpVMQVIELkrl/BEMKOe/veq0AREoecTI92iKA4w61fxjQQfTbGBosk
93VYX66BKP7SfvAFZdW7xmhzeRNxNnFuvMWg8e6LLbYGwu6nX1MsLjWVsjbn
qlG+Uc8L0KhxIzZwvGtWjY4t9av8rXLh4Z7iGLRdjfXnptYaXyjR68Li7/xD
hX+z02V19Srkes/t5tiJcUzHX3zoUzGKgx/7/dUlwec+HfGb4iXoGvbi5eWK
MaYJbn6RIsZtzdbep0opPhwyJd/nSfFQLpkyEZWEblPlhEUrTeM/9tpqwn18
930HSlK3VnuvoYxwcSOjLB6NqfUv36UkisjD4XrK4YjWBusDSuI6eV5gQ1nu
qDxVUXmR2MMMabLYeN2aluCUTUgLpj1iKMNePThw1F4F094P3q4+o8L79vax
b6pzEOCVELnklgqHD76MCl6rwlPP9aW3hDJs1x+PU5vkYBgfGR+/leNEWOSY
6kIOvOMaaTt6FGC/zZ1svpuNCfMh54PXhcjzKlulWyRB3M7+I8slEtAvPfX3
GBag2Sfo4f6lYgSwFnT2vSYRufgZz/RcjPo7mtWfbZbhnViU7JUqQ2LoBj5G
pGhl0s3uz6WY3efaQhPIwavQ+r6zlSNld5MoRi/D6krr1KJNUgzHXmXazRcg
J6j5vHsmCZsnhn7WRyQqm5drmTdIeK7xnN6rF+BUe95vrDwBzIzFbqtKstCt
4Sxxd8zCbNfAroFRARLGArQa6rcyY058xZpkgsuf3naZsiF8o+irIAH8ihwI
hq8Au2xJ9bhSgNBjvdXa7wVwe8WIbjEoMd+4kCYaUSLuhnlf1TM5OvLvrDdc
k+O7TL7ux2MK/F1XMuATrcDUm5A5wWVKxM7cTN8fqkKhuu1m+5/1BEO38n+d
Ixtt0o2NxKi5bZJHWRMyxW6oriV8TmQkWqyhj+dn3W0iFNHOBRYXGgrSX1+Q
oXaLGy9qUoaOYrq0rUSKRZFPPIqOSFAzk/51BNXZfn6dP9OZxM8Zvr2ZTSeI
qg4H772UgVrt4LzTGUTfM+uKBZR3OguHGGkXCaNbsu1yyvD6KzUGro5oM6f/
UEvJnVnkTeuvJGIc7KMsKgZnnnv4ipDETPDrixNhvLU1rX9ShPP9s3lhH4di
s7DjvsdKEkLdg18uB2eBTX+zhPaeRMbx/N2p88T4D3jeR9o=
     "]]}, {{}, {}}},
  AspectRatio->1,
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  Method->{
   "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        Identity[
         Part[#, 1]], 
        Identity[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 0.13157481791136202`}, {0, 0.13157481843760258`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.87231309828529*^9},
 CellLabel->
  "Out[603]=",ExpressionUUID->"a826e79e-9183-4381-a7c2-81f04c8b03a5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"featurePartitions", "[", 
  RowBox[{"[", "54", "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8723970793312683`*^9, 3.872397082328088*^9}},
 CellLabel->
  "In[906]:=",ExpressionUUID->"b220b6ef-8938-4150-97fb-88ff66fad3bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"5", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"12", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "\<\"Nominal\"\>"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8723970829545116`*^9},
 CellLabel->
  "Out[906]=",ExpressionUUID->"533175da-726a-47d3-9ff6-dbd8ca694f7f"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["\<\
Feature partitions that are most error independent when using different \
algorithms\
\>", "Subsection",
 CellChangeTimes->{{3.872397812483181*^9, 3.872397816264893*^9}, {
  3.872828070965602*^9, 
  3.872828134326713*^9}},ExpressionUUID->"2fbbb8e2-9fb5-4f9b-9e4f-\
fa6a583766f4"],

Cell["\<\
Now that we have some initial idea of what feature partitions lead to more \
independent trios, we can increase possible independence by training the \
partitions using different algorithms. We arbitrarily pick Naive Bayes, \
Logistic Regression and Random Forest as our three alternative algorithms. We \
scan the proposed feature partitions and try to identify partitions that are \
near the universal surface for all three algorithms.\
\>", "Text",
 CellChangeTimes->{{3.872828140052*^9, 
  3.872828284598872*^9}},ExpressionUUID->"7f590444-465b-4b42-aec1-\
8ff07f5ed452"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"classifiersFeatures", "=", 
  RowBox[{"featurePartitions", "[", 
   RowBox[{"[", "258", "]"}], "]"}]}]], "Input",
 CellLabel->
  "In[1193]:=",ExpressionUUID->"b4e64fd3-fbce-4447-9a86-8b5e494fabe7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "\<\"Nominal\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.8723978207457113`*^9},
 CellLabel->
  "Out[1193]=",ExpressionUUID->"76f07a60-50d6-4d33-83da-093c049a1fb9"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{"Testing", " ", "logistic", " ", "regression"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"searchDS", "=", "globalTrainTestSplit"}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<LogisticRegression\>\"", ",", 
         RowBox[{"\"\<L1Regularization\>\"", "->", "0.1"}], ",", 
         RowBox[{"\"\<L2Regularization\>\"", "->", "0.5"}], ",", 
         RowBox[{
         "\"\<OptimizationMethod\>\"", "->", 
          "\"\<StochasticGradientDescent\>\""}]}], "}"}], ",", 
       RowBox[{"{", "nClassifiers", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runsA", "=", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"vals", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "0"}], ",", 
          RowBox[{"i", "<", "5"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"runTrainTestSplit", "=", 
            RowBox[{"SelectTrainTestSplit", "[", 
             RowBox[{
             "globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"trainingIndices", "=", 
            RowBox[{"Transpose", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiersData", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"First", "@", 
                    RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], 
                 "&"}], ",", "runTrainTestSplit", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiers", " ", "=", " ", 
            RowBox[{"TrainClassifiersDisjoint", "[", 
             RowBox[{
             "classifiersData", ",", "classifierTypes", ",", 
              "trainingIndices", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Last", "@", 
                   RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
                "classifiersFeatures"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"vcbl", "=", 
            RowBox[{"LabelCounts", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "The", " ", "algebraic", " ", "evaluation", " ", "cannot", " ", 
             "work", " ", "unless", " ", "all", " ", "8", " ", "voting", " ", 
             "patterns", " ", "are", "\[IndentingNewLine]", 
             RowBox[{"observed", ".", " ", "Any"}], " ", "one", " ", "of", 
             " ", "them", " ", "being", " ", "absent", " ", "is", " ", "a", 
             " ", "clear", " ", "signal", " ", "the", " ", "classifiers", 
             "\[IndentingNewLine]", "are", " ", "too", " ", "correlated", " ",
              "in", " ", "the", " ", "sample"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"eval", "=", 
            RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IsNotComplexQ", "[", "eval", "]"}], "&&", 
              RowBox[{"Not", "@", 
               RowBox[{"MatchQ", "[", 
                RowBox[{"eval", ",", 
                 RowBox[{"{", 
                  RowBox[{"_", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}], "}"}]}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"tp1", "=", 
               RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"tp2", "=", 
               RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"reg", "=", 
               RowBox[{"GroundTruthImplicitRegion", "[", 
                RowBox[{"vcbl", ",", 
                 RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";",
               "\[IndentingNewLine]", 
              RowBox[{"points", "=", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}],
                     ",", 
                    RowBox[{"RegionNearest", "[", 
                    RowBox[{"reg", ",", 
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", 
                    "N"}]}], "]"}]}], "}"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"vals", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"points", "//", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], "-", 
                    RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], 
                    "]"}], "&"}]}], "//", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
                  RowBox[{
                   RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
                 RowBox[{
                  RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "vals"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"classifiersFeatures", ",", 
         RowBox[{"featurePartitions", "//", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "All"}], "]"}], "&"}]}]}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872307945267033*^9, 3.872308036769537*^9}, {
   3.872308070713026*^9, 3.872308150349695*^9}, {3.872308199844627*^9, 
   3.872308219435268*^9}, {3.8723110787720003`*^9, 3.872311190330472*^9}, {
   3.872311837252905*^9, 3.872311866075659*^9}, {3.872311911945546*^9, 
   3.8723119125733147`*^9}, {3.872312000695552*^9, 3.872312005800097*^9}, {
   3.872312625443328*^9, 3.872312640037829*^9}, {3.8723127457598467`*^9, 
   3.872312800968514*^9}, {3.8723128317478237`*^9, 3.872312833225493*^9}, {
   3.872312968137534*^9, 3.872313028959404*^9}, {3.872313128380877*^9, 
   3.8723132257545*^9}, 3.872313708644004*^9, {3.872313916362393*^9, 
   3.872313917301602*^9}, {3.872313957615117*^9, 3.8723139905837193`*^9}, {
   3.8723155052065573`*^9, 3.8723155137118473`*^9}, 3.872315548189294*^9, {
   3.872323244490177*^9, 3.87232327646557*^9}, {3.8723233128815928`*^9, 
   3.872323331145681*^9}, {3.872323374092197*^9, 3.872323407407041*^9}, {
   3.872323447598748*^9, 3.872323477326436*^9}, {3.872323530883313*^9, 
   3.872323584766015*^9}, {3.872397864317577*^9, 3.872397872212693*^9}, {
   3.872397982915927*^9, 3.872397984195627*^9}, {3.872398029392981*^9, 
   3.872398031808073*^9}, {3.872398097408388*^9, 3.872398099710087*^9}, {
   3.872398162346106*^9, 3.872398165832315*^9}, {3.8723982906651278`*^9, 
   3.872398299401132*^9}, {3.8723983693584948`*^9, 3.872398395654503*^9}, {
   3.872828289001811*^9, 
   3.872828304794463*^9}},ExpressionUUID->"2a217be6-198d-42c8-973f-\
b58a3d5cba4b"],

Cell["\<\
Let\[CloseCurlyQuote]s pick the feature partitions that were least distant \
from the universal surface.\
\>", "Text",
 CellChangeTimes->{{3.87282836093359*^9, 
  3.872828379136983*^9}},ExpressionUUID->"3e6bd87d-d3a9-41ac-b770-\
f6bed2e7ea26"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"runBIndices", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"runsA", "//", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "@", "#"}], "==", "5"}], "&"}]}], "]"}], 
         "&"}]}], "//", 
       RowBox[{
        RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
      RowBox[{
       RowBox[{"Max", "/@", "#"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "#1"}], "}"}], "&"}], ",", 
        "#"}], "]"}], "&"}]}], "//", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "@", "#"}], "<", "0.00000007"}], "&"}]}], "]"}], 
     "&"}]}], "//", 
   RowBox[{
    RowBox[{"First", "/@", "#"}], "&"}]}]}]], "Input",
 CellChangeTimes->{{3.8724218479051723`*^9, 3.872421886361318*^9}, {
  3.872421928224753*^9, 3.87242198124772*^9}, {3.8724222361167316`*^9, 
  3.872422248990168*^9}},
 CellLabel->
  "In[1260]:=",ExpressionUUID->"f78f9b84-b8b3-4d6c-bed5-a292568f1fe8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "31", ",", "66", ",", "77", ",", "85", ",", "191", ",", "199", ",", "258", 
   ",", "279", ",", "294", ",", "297", ",", "304", ",", "364", ",", "367", 
   ",", "387", ",", "396", ",", "412", ",", "432", ",", "434", ",", "438", 
   ",", "441", ",", "461", ",", "491", ",", "502", ",", "576", ",", "597", 
   ",", "604", ",", "605", ",", "627", ",", "655", ",", "676", ",", "702", 
   ",", "717", ",", "745"}], "}"}]], "Output",
 CellChangeTimes->{{3.8724218439954643`*^9, 3.8724218873681383`*^9}, {
   3.87242193118095*^9, 3.87242198328414*^9}, 3.872422250793589*^9},
 CellLabel->
  "Out[1260]=",ExpressionUUID->"7a47581b-63c5-47ac-ae4f-04e5087e8c6d"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Testing", " ", "Naive", " ", "Bayes", " ", "with", " ", "the", " ", 
    "partitions", " ", "selected", " ", "above"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<NaiveBayes\>\"", ",", 
         RowBox[{"\"\<SmoothingParameter\>\"", "->", "0.3"}]}], "}"}], ",", 
       RowBox[{"{", "nClassifiers", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runsB", "=", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"vals", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "0"}], ",", 
          RowBox[{"i", "<", "5"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"runTrainTestSplit", "=", 
            RowBox[{"SelectTrainTestSplit", "[", 
             RowBox[{
             "globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"trainingIndices", "=", 
            RowBox[{"Transpose", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiersData", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"First", "@", 
                    RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], 
                 "&"}], ",", "runTrainTestSplit", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiers", " ", "=", " ", 
            RowBox[{"TrainClassifiersDisjoint", "[", 
             RowBox[{
             "classifiersData", ",", "classifierTypes", ",", 
              "trainingIndices", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Last", "@", 
                   RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
                "classifiersFeatures"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"vcbl", "=", 
            RowBox[{"LabelCounts", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "The", " ", "algebraic", " ", "evaluation", " ", "cannot", " ", 
             "work", " ", "unless", " ", "all", " ", "8", " ", "voting", " ", 
             "patterns", " ", "are", "\[IndentingNewLine]", 
             RowBox[{"observed", ".", " ", "Any"}], " ", "one", " ", "of", 
             " ", "them", " ", "being", " ", "absent", " ", "is", " ", "a", 
             " ", "clear", " ", "signal", " ", "the", " ", "classifiers", 
             "\[IndentingNewLine]", "are", " ", "too", " ", "correlated", " ",
              "in", " ", "the", " ", "sample"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"eval", "=", 
            RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IsNotComplexQ", "[", "eval", "]"}], "&&", 
              RowBox[{"Not", "@", 
               RowBox[{"MatchQ", "[", 
                RowBox[{"eval", ",", 
                 RowBox[{"{", 
                  RowBox[{"_", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}], "}"}]}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"tp1", "=", 
               RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"tp2", "=", 
               RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"reg", "=", 
               RowBox[{"GroundTruthImplicitRegion", "[", 
                RowBox[{"vcbl", ",", 
                 RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";",
               "\[IndentingNewLine]", 
              RowBox[{"points", "=", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}],
                     ",", 
                    RowBox[{"RegionNearest", "[", 
                    RowBox[{"reg", ",", 
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", 
                    "N"}]}], "]"}]}], "}"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"vals", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"points", "//", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], "-", 
                    RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], 
                    "]"}], "&"}]}], "//", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
                  RowBox[{
                   RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
                 RowBox[{
                  RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "vals"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"classifiersFeatures", ",", 
         RowBox[{
          RowBox[{"featurePartitions", "[", 
           RowBox[{"[", "runBIndices", "]"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "All"}], "]"}], "&"}]}]}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872307945267033*^9, 3.872308036769537*^9}, {
   3.872308070713026*^9, 3.872308150349695*^9}, {3.872308199844627*^9, 
   3.872308219435268*^9}, {3.8723110787720003`*^9, 3.872311190330472*^9}, {
   3.872311837252905*^9, 3.872311866075659*^9}, {3.872311911945546*^9, 
   3.8723119125733147`*^9}, {3.872312000695552*^9, 3.872312005800097*^9}, {
   3.872312625443328*^9, 3.872312640037829*^9}, {3.8723127457598467`*^9, 
   3.872312800968514*^9}, {3.8723128317478237`*^9, 3.872312833225493*^9}, {
   3.872312968137534*^9, 3.872313028959404*^9}, {3.872313128380877*^9, 
   3.8723132257545*^9}, 3.872313708644004*^9, {3.872313916362393*^9, 
   3.872313917301602*^9}, {3.872313957615117*^9, 3.8723139905837193`*^9}, {
   3.8723155052065573`*^9, 3.8723155137118473`*^9}, 3.872315548189294*^9, {
   3.872323244490177*^9, 3.87232327646557*^9}, {3.8723233128815928`*^9, 
   3.872323331145681*^9}, {3.872323374092197*^9, 3.872323407407041*^9}, {
   3.872323447598748*^9, 3.872323477326436*^9}, {3.872323530883313*^9, 
   3.872323584766015*^9}, {3.872397864317577*^9, 3.872397872212693*^9}, {
   3.872397982915927*^9, 3.872397984195627*^9}, {3.872398029392981*^9, 
   3.872398031808073*^9}, {3.872398097408388*^9, 3.872398099710087*^9}, {
   3.872398162346106*^9, 3.872398165832315*^9}, {3.8723982906651278`*^9, 
   3.872398299401132*^9}, {3.8723983693584948`*^9, 3.872398395654503*^9}, {
   3.872422028019556*^9, 3.872422030037347*^9}, {3.872422074966062*^9, 
   3.872422136714509*^9}, {3.872422258590769*^9, 3.87242226278304*^9}, {
   3.872422556371532*^9, 3.872422559178322*^9}, {3.8728283121744337`*^9, 
   3.872828322495431*^9}, {3.872828387254745*^9, 
   3.8728283966196537`*^9}},ExpressionUUID->"830f9ff7-e4ad-4ffb-8af0-\
6dc60092ff89"],

Cell[CellGroupData[{

Cell[BoxData["runsB"], "Input",
 CellChangeTimes->{{3.872422186483799*^9, 3.87242218889821*^9}},
 CellLabel->
  "In[1266]:=",ExpressionUUID->"d9e95dc6-73c2-4a04-9eaa-03aa0d4ff036"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7.563822061963424`*^-8", ",", "6.750389127015962`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.059334820324428`*^-8", ",", "6.985818951734971`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.465584726236806`*^-8", ",", "6.897256833258145`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.485313447737338`*^-8", ",", "7.103192175953459`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.245566627523252`*^-8", ",", "8.033945745708916`*^-8"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"8.336575910386505`*^-8", ",", "8.025479209804664`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.838690515072868`*^-8", ",", "7.804559606479443`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"6.814295484357701`*^-8", ",", "6.509002837608805`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.303156293994678`*^-8", ",", "7.778156543577966`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.341129952805777`*^-8", ",", "7.574385092344297`*^-8"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.87242219018423*^9, 3.872422291540429*^9},
 CellLabel->
  "Out[1266]=",ExpressionUUID->"043c26cd-11fc-4e1a-8f9d-299d73f9c3e8"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", " ", 
   RowBox[{
   "Test", " ", "Random", " ", "Forest", " ", "trios", " ", "using", " ", 
    "the", " ", "partitions", " ", "that", " ", "did", " ", "best", " ", 
    "with", " ", "Logistic", " ", "Regression"}], " ", "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", " ", "=", " ", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<RandomForest\>\"", ",", 
         RowBox[{"\"\<DistributionSmoothing\>\"", "->", "0.3"}], ",", 
         RowBox[{"\"\<LeafSize\>\"", "->", "100"}], ",", 
         RowBox[{"\"\<TreeNumber\>\"", "->", "20"}]}], "}"}], ",", 
       RowBox[{"{", "nClassifiers", "}"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runsC", "=", 
     RowBox[{"Table", "[", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"vals", "=", 
         RowBox[{"{", "}"}]}], ";", "\[IndentingNewLine]", 
        RowBox[{"For", "[", 
         RowBox[{
          RowBox[{"i", "=", "0"}], ",", 
          RowBox[{"i", "<", "5"}], ",", 
          RowBox[{"i", "++"}], ",", "\[IndentingNewLine]", 
          RowBox[{
           RowBox[{"runTrainTestSplit", "=", 
            RowBox[{"SelectTrainTestSplit", "[", 
             RowBox[{
             "globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"trainingIndices", "=", 
            RowBox[{"Transpose", "@", 
             RowBox[{"{", "\[IndentingNewLine]", 
              RowBox[{
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
               "\[IndentingNewLine]", 
               RowBox[{
                RowBox[{
                 RowBox[{"RandomSample", "[", 
                  RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
                 RowBox[{
                  RowBox[{"Partition", "[", 
                   RowBox[{"#", ",", 
                    RowBox[{"Floor", "[", 
                    RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
                  "&"}]}], "//", 
                RowBox[{
                 RowBox[{"Take", "[", 
                  RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], 
              "}"}]}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiersData", "=", 
            RowBox[{"Table", "[", 
             RowBox[{
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"#", "[", 
                  RowBox[{"[", 
                   RowBox[{"First", "@", 
                    RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], 
                 "&"}], ",", "runTrainTestSplit", ",", 
                RowBox[{"{", "3", "}"}]}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], 
             "]"}]}], ";", "\[IndentingNewLine]", 
           RowBox[{"classifiers", " ", "=", " ", 
            RowBox[{"TrainClassifiersDisjoint", "[", 
             RowBox[{
             "classifiersData", ",", "classifierTypes", ",", 
              "trainingIndices", ",", 
              RowBox[{"Map", "[", 
               RowBox[{
                RowBox[{
                 RowBox[{"(", 
                  RowBox[{"Last", "@", 
                   RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
                "classifiersFeatures"}], "]"}]}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"vcbl", "=", 
            RowBox[{"LabelCounts", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"(*", " ", 
            RowBox[{
            "The", " ", "algebraic", " ", "evaluation", " ", "cannot", " ", 
             "work", " ", "unless", " ", "all", " ", "8", " ", "voting", " ", 
             "patterns", " ", "are", "\[IndentingNewLine]", 
             RowBox[{"observed", ".", " ", "Any"}], " ", "one", " ", "of", 
             " ", "them", " ", "being", " ", "absent", " ", "is", " ", "a", 
             " ", "clear", " ", "signal", " ", "the", " ", "classifiers", 
             "\[IndentingNewLine]", "are", " ", "too", " ", "correlated", " ",
              "in", " ", "the", " ", "sample"}], " ", "*)"}], 
           "\[IndentingNewLine]", 
           RowBox[{"eval", "=", 
            RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
             RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
           "\[IndentingNewLine]", 
           RowBox[{"If", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"IsNotComplexQ", "[", "eval", "]"}], "&&", 
              RowBox[{"Not", "@", 
               RowBox[{"MatchQ", "[", 
                RowBox[{"eval", ",", 
                 RowBox[{"{", 
                  RowBox[{"_", ",", 
                   RowBox[{"{", 
                    RowBox[{"{", "}"}], "}"}]}], "}"}]}], "]"}]}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{
              RowBox[{"tp1", "=", 
               RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"tp2", "=", 
               RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"reg", "=", 
               RowBox[{"GroundTruthImplicitRegion", "[", 
                RowBox[{"vcbl", ",", 
                 RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";",
               "\[IndentingNewLine]", 
              RowBox[{"points", "=", 
               RowBox[{"Map", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}],
                     ",", 
                    RowBox[{"RegionNearest", "[", 
                    RowBox[{"reg", ",", 
                    RowBox[{
                    RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", 
                    "N"}]}], "]"}]}], "}"}], "&"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
              "\[IndentingNewLine]", 
              RowBox[{"AppendTo", "[", 
               RowBox[{"vals", ",", 
                RowBox[{
                 RowBox[{
                  RowBox[{
                   RowBox[{"points", "//", 
                    RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"First", "@", "#"}], "-", 
                    RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], 
                    "]"}], "&"}]}], "//", 
                   RowBox[{
                    RowBox[{"Map", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
                    RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
                  RowBox[{
                   RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
                 RowBox[{
                  RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], "]"}]}], ",", 
             "\[IndentingNewLine]", 
             RowBox[{"Break", "[", "]"}]}], "]"}]}]}], "]"}], ";", 
        "\[IndentingNewLine]", "vals"}], ",", "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"classifiersFeatures", ",", 
         RowBox[{
          RowBox[{"featurePartitions", "[", 
           RowBox[{"[", "runBIndices", "]"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "All"}], "]"}], "&"}]}]}], "}"}]}], "]"}]}], 
    ";"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872307945267033*^9, 3.872308036769537*^9}, {
   3.872308070713026*^9, 3.872308150349695*^9}, {3.872308199844627*^9, 
   3.872308219435268*^9}, {3.8723110787720003`*^9, 3.872311190330472*^9}, {
   3.872311837252905*^9, 3.872311866075659*^9}, {3.872311911945546*^9, 
   3.8723119125733147`*^9}, {3.872312000695552*^9, 3.872312005800097*^9}, {
   3.872312625443328*^9, 3.872312640037829*^9}, {3.8723127457598467`*^9, 
   3.872312800968514*^9}, {3.8723128317478237`*^9, 3.872312833225493*^9}, {
   3.872312968137534*^9, 3.872313028959404*^9}, {3.872313128380877*^9, 
   3.8723132257545*^9}, 3.872313708644004*^9, {3.872313916362393*^9, 
   3.872313917301602*^9}, {3.872313957615117*^9, 3.8723139905837193`*^9}, {
   3.8723155052065573`*^9, 3.8723155137118473`*^9}, 3.872315548189294*^9, {
   3.872323244490177*^9, 3.87232327646557*^9}, {3.8723233128815928`*^9, 
   3.872323331145681*^9}, {3.872323374092197*^9, 3.872323407407041*^9}, {
   3.872323447598748*^9, 3.872323477326436*^9}, {3.872323530883313*^9, 
   3.872323584766015*^9}, {3.872397864317577*^9, 3.872397872212693*^9}, {
   3.872397982915927*^9, 3.872397984195627*^9}, {3.872398029392981*^9, 
   3.872398031808073*^9}, {3.872398097408388*^9, 3.872398099710087*^9}, {
   3.872398162346106*^9, 3.872398165832315*^9}, {3.8723982906651278`*^9, 
   3.872398299401132*^9}, {3.8723983693584948`*^9, 3.872398395654503*^9}, {
   3.872422028019556*^9, 3.872422030037347*^9}, {3.872422074966062*^9, 
   3.872422136714509*^9}, {3.872422258590769*^9, 3.87242226278304*^9}, {
   3.8724223207015753`*^9, 3.872422328247448*^9}, {3.872422415785084*^9, 
   3.872422466600231*^9}, {3.8724225068626423`*^9, 3.87242250900212*^9}, {
   3.872422565792325*^9, 3.872422569908046*^9}, {3.872828416155055*^9, 
   3.872828437489889*^9}},ExpressionUUID->"f929f99f-773c-40b0-bc3c-\
53164b726e68"],

Cell[CellGroupData[{

Cell[BoxData["runsC"], "Input",
 CellChangeTimes->{{3.87242253975243*^9, 3.8724225421131077`*^9}},
 CellLabel->
  "In[1272]:=",ExpressionUUID->"ada44213-b013-47cb-a5c6-1c9bf492ae45"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6.622323553747421`*^-8", ",", "6.879123722446267`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.166668060101267`*^-8", ",", "7.832706712707292`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.017530856515975`*^-8", ",", "8.03323221441277`*^-8"}], "}"}],
      ",", 
     RowBox[{"{", 
      RowBox[{"8.464750491719628`*^-8", ",", "8.28070978653`*^-8"}], "}"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"6.349976053945114`*^-8", ",", "7.192263910207498`*^-8"}], 
      "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"7.494156299524608`*^-8", ",", "7.476994797872384`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.292623200735771`*^-8", ",", "7.342935029782477`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"7.630282500448882`*^-8", ",", "7.272329937242574`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.182655532868244`*^-8", ",", "8.520581503844593`*^-8"}], 
      "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8.187650526814272`*^-8", ",", "1.0428770684094161`*^-7"}], 
      "}"}]}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8724225433863993`*^9},
 CellLabel->
  "Out[1272]=",ExpressionUUID->"b3ade69d-131c-405f-8ab0-0a9fc0c0ea68"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"indicesB", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"runsB", "//", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "@", "#"}], "==", "5"}], "&"}]}], "]"}], 
         "&"}]}], "//", 
       RowBox[{
        RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
      RowBox[{
       RowBox[{"Max", "/@", "#"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "#1"}], "}"}], "&"}], ",", 
        "#"}], "]"}], "&"}]}], "//", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "@", "#"}], "<", "0.00000008"}], "&"}]}], "]"}], 
     "&"}]}], "//", 
   RowBox[{
    RowBox[{"First", "/@", "#"}], "&"}]}]}]], "Input",
 CellChangeTimes->{{3.872423238265833*^9, 3.8724232680955563`*^9}, {
  3.872423313981241*^9, 3.872423325475814*^9}},
 CellLabel->
  "In[1291]:=",ExpressionUUID->"ee573039-85ee-4529-9c50-a4dae0c1a0ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"7", ",", "11", ",", "18"}], "}"}]], "Output",
 CellChangeTimes->{{3.872423242900666*^9, 3.8724232728039618`*^9}, {
  3.87242331645993*^9, 3.872423326576728*^9}},
 CellLabel->
  "Out[1291]=",ExpressionUUID->"f1bc5bcc-af0e-41b2-868f-282b1b9aaba0"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"indicesC", "=", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{"runsC", "//", 
        RowBox[{
         RowBox[{"Select", "[", 
          RowBox[{"#", ",", 
           RowBox[{
            RowBox[{
             RowBox[{"Length", "@", "#"}], "==", "5"}], "&"}]}], "]"}], 
         "&"}]}], "//", 
       RowBox[{
        RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
      RowBox[{
       RowBox[{"Max", "/@", "#"}], "&"}]}], "//", 
     RowBox[{
      RowBox[{"MapIndexed", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"#2", "[", 
            RowBox[{"[", "1", "]"}], "]"}], ",", "#1"}], "}"}], "&"}], ",", 
        "#"}], "]"}], "&"}]}], "//", 
    RowBox[{
     RowBox[{"Select", "[", 
      RowBox[{"#", ",", 
       RowBox[{
        RowBox[{
         RowBox[{"Last", "@", "#"}], "<", "0.0000001"}], "&"}]}], "]"}], 
     "&"}]}], "//", 
   RowBox[{
    RowBox[{"First", "/@", "#"}], "&"}]}]}]], "Input",
 CellChangeTimes->{{3.872423283131735*^9, 3.8724233095336313`*^9}},
 CellLabel->
  "In[1288]:=",ExpressionUUID->"ce2afad4-5543-47de-a49a-f63ffdd6cfdc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "5", ",", "7", ",", "8", ",", "9", ",", "11", ",", "14",
    ",", "18", ",", "24", ",", "26"}], "}"}]], "Output",
 CellChangeTimes->{{3.872423292501944*^9, 3.87242331016747*^9}},
 CellLabel->
  "Out[1288]=",ExpressionUUID->"463e1197-a1d3-46aa-8278-db9430078c15"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"runBIndices", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"7", ",", "11", ",", "18"}], "}"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.8724233410152893`*^9, 3.872423368496798*^9}},
 CellLabel->
  "In[1292]:=",ExpressionUUID->"b62826cd-96ee-4ed2-ad68-7da046f7df72"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"258", ",", "304", ",", "434"}], "}"}]], "Output",
 CellChangeTimes->{3.8724233703628607`*^9},
 CellLabel->
  "Out[1292]=",ExpressionUUID->"c2bcdfec-a813-4469-814c-65950c00b8aa"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"How", " ", "good", " ", "is", " ", "partition", " ", 
    RowBox[{"258", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"classifiersFeatures", "=", 
    RowBox[{"featurePartitions", "[", 
     RowBox[{"[", "258", "]"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<RandomForest\>\"", ",", 
         RowBox[{"\"\<DistributionSmoothing\>\"", "->", "0.3"}], ",", 
         RowBox[{"\"\<LeafSize\>\"", "->", "100"}], ",", 
         RowBox[{"\"\<TreeNumber\>\"", "->", "20"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<NaiveBayes\>\"", ",", 
         RowBox[{"\"\<SmoothingParameter\>\"", "->", "0.3"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<LogisticRegression\>\"", ",", 
         RowBox[{"\"\<L1Regularization\>\"", "->", "0.1"}], ",", 
         RowBox[{"\"\<L2Regularization\>\"", "->", "0.5"}], ",", 
         RowBox[{
         "\"\<OptimizationMethod\>\"", "->", 
          "\"\<StochasticGradientDescent\>\""}]}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runTrainTestSplit", "=", 
     RowBox[{"SelectTrainTestSplit", "[", 
      RowBox[{"globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingIndices", "=", 
     RowBox[{"Transpose", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], "}"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiersData", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"First", "@", 
             RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], "&"}], 
         ",", "runTrainTestSplit", ",", 
         RowBox[{"{", "3", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiers", " ", "=", " ", 
     RowBox[{"TrainClassifiersDisjoint", "[", 
      RowBox[{
      "classifiersData", ",", "classifierTypes", ",", "trainingIndices", ",", 
       
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Last", "@", 
            RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
         "classifiersFeatures"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "=", 
     RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
      RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IsNotComplexQ", "[", "eval", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"tp1", "=", 
       RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tp2", "=", 
       RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vcbl", "=", 
       RowBox[{"LabelCounts", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reg", "=", 
       RowBox[{"GroundTruthImplicitRegion", "[", 
        RowBox[{"vcbl", ",", 
         RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"points", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], ",", 
            RowBox[{"RegionNearest", "[", 
             RowBox[{"reg", ",", 
              RowBox[{
               RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}]}], 
             "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"points", "//", 
              RowBox[{
               RowBox[{"Transpose", "/@", "#"}], "&"}]}], "//", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", "7"}], "]"}], "&"}]}], "//", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", "1"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 SubscriptBox["P", "\[Alpha]"], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   SubscriptBox["P", "\[Alpha]"], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "/.", 
                 RowBox[{"(", 
                  RowBox[{"eval", "//", "First"}], ")"}]}], "//", "N"}], 
               "}"}], ",", 
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}]}], "//", 
          "Transpose"}], "//", 
         RowBox[{
          RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Grid", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Dividers", "->", "All"}]}], "]"}], "&"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", "//", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"First", "@", "#"}], "-", 
                RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], "]"}],
            "&"}]}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], ",", "\[IndentingNewLine]", 
     "Nothing"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "//", "First"}], "//", "N"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872227131409071*^9, 3.872227193547657*^9}, {
   3.872227229803397*^9, 3.872227239961542*^9}, {3.872227314360325*^9, 
   3.8722273260202293`*^9}, {3.872227382775607*^9, 3.872227418298526*^9}, {
   3.872227461650676*^9, 3.87222746372779*^9}, {3.87222749452941*^9, 
   3.8722275365155773`*^9}, {3.8722275800225687`*^9, 
   3.8722275808174057`*^9}, {3.872227620273551*^9, 3.872227638117157*^9}, 
   3.872227677433093*^9, {3.8722277183078527`*^9, 3.872227727998815*^9}, {
   3.872227763031468*^9, 3.8722277950779333`*^9}, {3.8722278573531322`*^9, 
   3.8722278595789843`*^9}, 3.87222794221894*^9, {3.872227974994749*^9, 
   3.872228037429139*^9}, {3.8722280755136757`*^9, 3.87222822498263*^9}, {
   3.8722285994912453`*^9, 3.872228635242331*^9}, {3.872228852427012*^9, 
   3.872228899963132*^9}, {3.872229159157515*^9, 3.872229184986931*^9}, {
   3.872229276646233*^9, 3.872229280588162*^9}, 3.872229649215127*^9, {
   3.87222969061078*^9, 3.872229700712111*^9}, {3.872229764296651*^9, 
   3.8722298109552603`*^9}, {3.872229847030231*^9, 3.8722298898222733`*^9}, {
   3.87222995418666*^9, 3.872229991560005*^9}, {3.872230027247669*^9, 
   3.872230064846319*^9}, {3.8722301463309937`*^9, 3.872230175111985*^9}, 
   3.87223023152927*^9, 3.8722302657308064`*^9, {3.872230308740641*^9, 
   3.872230313286141*^9}, {3.872245796678767*^9, 3.8722458012426434`*^9}, 
   3.872245870295103*^9, {3.872245933141944*^9, 3.87224603673029*^9}, 
   3.872246078418956*^9, {3.872246112985475*^9, 3.87224621361215*^9}, {
   3.872246249160623*^9, 3.872246298852219*^9}, {3.8722463304847813`*^9, 
   3.872246355129428*^9}, {3.872246396543681*^9, 3.872246421046482*^9}, {
   3.87224646112115*^9, 3.872246491218321*^9}, {3.872246530799119*^9, 
   3.872246537560668*^9}, {3.872246954720902*^9, 3.8722469560756702`*^9}, {
   3.872247038373595*^9, 3.872247052827866*^9}, {3.872247118453021*^9, 
   3.8722471926877747`*^9}, {3.872247226496471*^9, 3.872247323069315*^9}, {
   3.872247394572092*^9, 3.872247395451879*^9}, {3.872247822199974*^9, 
   3.8722478465414124`*^9}, {3.8722479950358267`*^9, 
   3.8722479957114973`*^9}, {3.8722481434204884`*^9, 
   3.8722481489839363`*^9}, {3.87230688462062*^9, 3.872306885429875*^9}, {
   3.872306941684249*^9, 3.872306942808691*^9}, {3.872311723251595*^9, 
   3.8723117977373543`*^9}, {3.872314548687635*^9, 3.87231455045343*^9}, {
   3.872314595381403*^9, 3.87231459585338*^9}, {3.872341735276582*^9, 
   3.8723417591550007`*^9}, {3.8723419358440332`*^9, 3.872341978588171*^9}, {
   3.872342022385604*^9, 3.872342034480843*^9}, {3.872342188791711*^9, 
   3.872342208383012*^9}, {3.872342240881886*^9, 3.8723422448156347`*^9}, {
   3.872343067618401*^9, 3.87234307006394*^9}, {3.872395928195756*^9, 
   3.872395929903315*^9}, {3.872395977201404*^9, 3.872396041257126*^9}, {
   3.8723960718252068`*^9, 3.872396072331667*^9}, {3.872396138725506*^9, 
   3.8723961405491943`*^9}, {3.8723962238901463`*^9, 3.872396226098159*^9}, {
   3.872396269889812*^9, 3.8723962713687553`*^9}, {3.872396345756868*^9, 
   3.8723963736350393`*^9}, {3.8723965310778723`*^9, 
   3.8723965366525097`*^9}, {3.8723966686235027`*^9, 3.872396669204019*^9}, {
   3.872396806299285*^9, 3.872396808124995*^9}, {3.872397172585573*^9, 
   3.8723971760944767`*^9}, {3.872397264169573*^9, 3.872397266002136*^9}, {
   3.8723974414033337`*^9, 3.872397450301363*^9}, {3.872423397786235*^9, 
   3.8724235423987427`*^9}, {3.8724236099875727`*^9, 
   3.8724236119111443`*^9}, {3.872423712431264*^9, 3.872423715010457*^9}, {
   3.872438347147915*^9, 3.87243834922479*^9}, 3.872441300581422*^9, {
   3.872828455843094*^9, 3.8728284618952208`*^9}},
 CellLabel->
  "In[3910]:=",ExpressionUUID->"3150d528-afbc-42b6-a0bd-6daa3bdaf3d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "\<\"Nominal\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.872423402873191*^9, {3.872423543765225*^9, 3.87242375364882*^9}, {
   3.872438042115932*^9, 3.8724380975561523`*^9}, 3.872438133524822*^9, {
   3.87243819686005*^9, 3.8724382539651423`*^9}, 3.8724382935730124`*^9, 
   3.872441302421204*^9, {3.8724416240453987`*^9, 3.872441639987206*^9}, 
   3.872441677850863*^9, {3.8724994576118183`*^9, 3.87249948576543*^9}, 
   3.872828030418445*^9, 3.872828471283682*^9},
 CellLabel->
  "Out[3910]=",ExpressionUUID->"52f718d4-38c6-4438-ae55-008f8e2f0315"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.30506329051477593`", "0.30506324497590126`", 
     SubscriptBox["P", "\[Alpha]"], "0.3333333333333333`", 
     "0.6949367094852241`", "0.6949366648797378`"},
    {"0.648225338960053`", "0.648225320037719`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], "0.6475`", "0.31549670942581287`", 
     "0.3154966763912423`"},
    {"0.6845032905741871`", "0.684503258136734`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], "0.69825`", "0.35177466103994703`", 
     "0.35177464073007164`"},
    {"0.4037559264321948`", "0.4037559037978448`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], "0.374`", "0.21128382846046037`", 
     "0.21128380147715936`"},
    {"0.7887161715395398`", "0.788716145852569`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], "0.782`", "0.5962440735678052`", 
     "0.5962440493374318`"},
    {"0.9904304709542812`", "0.990430459351988`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], "0.9105`", "0.4552299758907962`", 
     "0.45522993489484803`"},
    {"0.5447700241092038`", "0.5447699839559725`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]], "0.5275`", "0.009569529045718866`", 
     "0.009569515463083555`"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Print",
 CellChangeTimes->{
  3.872423405451833*^9, {3.872423545721024*^9, 3.8724237562001867`*^9}, {
   3.872438045130769*^9, 3.8724381005323133`*^9}, 3.8724381355374813`*^9, {
   3.8724381988266172`*^9, 3.872438255921447*^9}, 3.872438295286022*^9, 
   3.8724413052180157`*^9, {3.872441626074004*^9, 3.8724416419738007`*^9}, 
   3.8724416798525543`*^9, {3.872499460553989*^9, 3.8724994876746397`*^9}, 
   3.872828032584255*^9, 3.872828473443882*^9},
 CellLabel->
  "During evaluation of \
In[3910]:=",ExpressionUUID->"13db7a91-c50f-43fb-a915-a60b874fd087"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"8.001913303886062`*^-8", ",", "8.169325907130588`*^-8"}], 
  "}"}]], "Output",
 CellChangeTimes->{
  3.872423402873191*^9, {3.872423543765225*^9, 3.87242375364882*^9}, {
   3.872438042115932*^9, 3.8724380975561523`*^9}, 3.872438133524822*^9, {
   3.87243819686005*^9, 3.8724382539651423`*^9}, 3.8724382935730124`*^9, 
   3.872441302421204*^9, {3.8724416240453987`*^9, 3.872441639987206*^9}, 
   3.872441677850863*^9, {3.8724994576118183`*^9, 3.87249948576543*^9}, 
   3.872828030418445*^9, 3.8728284734524918`*^9},
 CellLabel->
  "Out[3920]=",ExpressionUUID->"13dd2764-c302-47b1-8381-47d262d7d079"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    SubscriptBox["P", "\[Alpha]"], "\[Rule]", "0.3333333333333333`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"1", ",", "\[Alpha]"}]], "\[Rule]", "0.6475`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"2", ",", "\[Alpha]"}]], "\[Rule]", "0.374`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"3", ",", "\[Alpha]"}]], "\[Rule]", "0.9105`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"1", ",", "\[Beta]"}]], "\[Rule]", "0.69825`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"2", ",", "\[Beta]"}]], "\[Rule]", "0.782`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"3", ",", "\[Beta]"}]], "\[Rule]", "0.5275`"}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "\[Alpha]"}]], "\[Rule]", "0.010835`"}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    RowBox[{"-", "0.00754875`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"2", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    RowBox[{"-", "0.001527`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "\[Beta]"}]], "\[Rule]", 
    RowBox[{"-", "0.0030315`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "3", ",", "\[Beta]"}]], "\[Rule]", "0.009923125`"}], 
   ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"2", ",", "3", ",", "\[Beta]"}]], "\[Rule]", "0.010745`"}], ",", 
   
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    "0.002455465`"}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "3", ",", "\[Beta]"}]], "\[Rule]", 
    RowBox[{"-", "0.00069508`"}]}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{
  3.872423402873191*^9, {3.872423543765225*^9, 3.87242375364882*^9}, {
   3.872438042115932*^9, 3.8724380975561523`*^9}, 3.872438133524822*^9, {
   3.87243819686005*^9, 3.8724382539651423`*^9}, 3.8724382935730124`*^9, 
   3.872441302421204*^9, {3.8724416240453987`*^9, 3.872441639987206*^9}, 
   3.872441677850863*^9, {3.8724994576118183`*^9, 3.87249948576543*^9}, 
   3.872828030418445*^9, 3.872828473461453*^9},
 CellLabel->
  "Out[3921]=",ExpressionUUID->"91c60eb2-6ae6-46d1-8d34-b1f19f0a85e3"]
}, Open  ]],

Cell["Wow. That is really good.", "Text",
 CellChangeTimes->{{3.8728284957459087`*^9, 
  3.872828507331102*^9}},ExpressionUUID->"dafe7088-37bd-492b-9821-\
4846acc3ebed"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Another Train/Test Split", "Section",
 CellChangeTimes->{{3.8728285265582733`*^9, 
  3.872828534859511*^9}},ExpressionUUID->"379d1d5e-a6d2-4a1b-b195-\
e37802f9d099"],

Cell["\<\
We found a feature partition that did very well given a global train/test \
split. Is the partition dependent on that particular split? Let\
\[CloseCurlyQuote]s test another global train/test split.\
\>", "Text",
 CellChangeTimes->{{3.872828541978581*^9, 
  3.8728286173577833`*^9}},ExpressionUUID->"d1f83cdf-dc6a-4858-bdf9-\
b7749d932da2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"trainingPoolSize", "=", "9000"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"globalTrainTestSplit", "=", 
   RowBox[{"Association", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"0", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"benchmarkData", "[", "0", "]"}], "]"}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}]}], "}"}], "&"}]}], 
       ")"}]}], ",", "\[IndentingNewLine]", 
     RowBox[{"1", "->", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"RandomSample", "[", 
         RowBox[{"benchmarkData", "[", "1", "]"}], "]"}], "//", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"Take", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}], ",", 
           RowBox[{"Drop", "[", 
            RowBox[{"#", ",", "trainingPoolSize"}], "]"}]}], "}"}], "&"}]}], 
       ")"}]}]}], "]"}]}], ";"}]}], "Input",
 CellLabel->
  "In[3936]:=",ExpressionUUID->"3ba8c25f-0e2a-4e43-a2f1-e3241a08e2c9"],

Cell[BoxData["9000"], "Output",
 CellChangeTimes->{3.8728286432723618`*^9, 3.8728286938276167`*^9},
 CellLabel->
  "Out[3936]=",ExpressionUUID->"56212bf4-2fb6-4fc2-9181-f5bc248f8b6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"How", " ", "good", " ", "is", " ", "partition", " ", 
    RowBox[{"258", "?"}]}], " ", "*)"}], "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"classifiersFeatures", "=", 
    RowBox[{"featurePartitions", "[", 
     RowBox[{"[", "258", "]"}], "]"}]}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTestAlpha", "=", "2000"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nTrain", "=", "3600"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"nClassifiers", "=", "3"}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifierTypes", "=", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"\"\<RandomForest\>\"", ",", 
         RowBox[{"\"\<DistributionSmoothing\>\"", "->", "0.3"}], ",", 
         RowBox[{"\"\<LeafSize\>\"", "->", "100"}], ",", 
         RowBox[{"\"\<TreeNumber\>\"", "->", "20"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<NaiveBayes\>\"", ",", 
         RowBox[{"\"\<SmoothingParameter\>\"", "->", "0.3"}]}], "}"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"{", 
        RowBox[{"\"\<LogisticRegression\>\"", ",", 
         RowBox[{"\"\<L1Regularization\>\"", "->", "0.1"}], ",", 
         RowBox[{"\"\<L2Regularization\>\"", "->", "0.5"}], ",", 
         RowBox[{
         "\"\<OptimizationMethod\>\"", "->", 
          "\"\<StochasticGradientDescent\>\""}]}], "}"}]}], "}"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"runTrainTestSplit", "=", 
     RowBox[{"SelectTrainTestSplit", "[", 
      RowBox[{"globalTrainTestSplit", ",", "nTestAlpha", ",", "nTrain"}], 
      "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"trainingIndices", "=", 
     RowBox[{"Transpose", "@", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{
          RowBox[{"RandomSample", "[", 
           RowBox[{"Range", "@", "nTrain"}], "]"}], "//", 
          RowBox[{
           RowBox[{"Partition", "[", 
            RowBox[{"#", ",", 
             RowBox[{"Floor", "[", 
              RowBox[{"nTrain", "/", "nClassifiers"}], "]"}]}], "]"}], 
           "&"}]}], "//", 
         RowBox[{
          RowBox[{"Take", "[", 
           RowBox[{"#", ",", "nClassifiers"}], "]"}], "&"}]}]}], "}"}]}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiersData", "=", 
     RowBox[{"Table", "[", 
      RowBox[{
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "[", 
           RowBox[{"[", 
            RowBox[{"First", "@", 
             RowBox[{"Transpose", "@", "features"}]}], "]"}], "]"}], "&"}], 
         ",", "runTrainTestSplit", ",", 
         RowBox[{"{", "3", "}"}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"features", ",", "classifiersFeatures"}], "}"}]}], "]"}]}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"classifiers", " ", "=", " ", 
     RowBox[{"TrainClassifiersDisjoint", "[", 
      RowBox[{
      "classifiersData", ",", "classifierTypes", ",", "trainingIndices", ",", 
       
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"(", 
           RowBox[{"Last", "@", 
            RowBox[{"Transpose", "@", "#"}]}], ")"}], "&"}], ",", 
         "classifiersFeatures"}], "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "=", 
     RowBox[{"AlgebraicallyEvaluateClassifiers", "[", 
      RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";"}], 
   "\[IndentingNewLine]", 
   RowBox[{"If", "[", 
    RowBox[{
     RowBox[{"IsNotComplexQ", "[", "eval", "]"}], ",", "\[IndentingNewLine]", 
     
     RowBox[{
      RowBox[{"tp1", "=", 
       RowBox[{"FirstSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"tp2", "=", 
       RowBox[{"SecondSolutionPoint", "[", "eval", "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"vcbl", "=", 
       RowBox[{"LabelCounts", "[", 
        RowBox[{"classifiers", ",", "classifiersData"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"reg", "=", 
       RowBox[{"GroundTruthImplicitRegion", "[", 
        RowBox[{"vcbl", ",", 
         RowBox[{"Range", "@", "3"}], ",", "\[Alpha]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"points", "=", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}], ",", 
            RowBox[{"RegionNearest", "[", 
             RowBox[{"reg", ",", 
              RowBox[{
               RowBox[{"GroundTruthCoordinates", "@", "#"}], "//", "N"}]}], 
             "]"}]}], "}"}], "&"}], ",", 
         RowBox[{"{", 
          RowBox[{"tp1", ",", "tp2"}], "}"}]}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"Print", "[", 
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{
            RowBox[{
             RowBox[{"points", "//", 
              RowBox[{
               RowBox[{"Transpose", "/@", "#"}], "&"}]}], "//", 
             RowBox[{
              RowBox[{"Flatten", "[", 
               RowBox[{"#", ",", "1"}], "]"}], "&"}]}], "//", 
            RowBox[{
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", "7"}], "]"}], "&"}]}], "//", 
           RowBox[{
            RowBox[{"Join", "[", 
             RowBox[{
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", "1"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"{", 
                RowBox[{
                 SubscriptBox["P", "\[Alpha]"], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"1", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"2", ",", "\[Beta]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                 SubscriptBox["P", 
                  RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "}"}], ",", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{
                   SubscriptBox["P", "\[Alpha]"], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"1", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"2", ",", "\[Beta]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Alpha]"}]], ",", 
                   SubscriptBox["P", 
                    RowBox[{"3", ",", "\[Beta]"}]]}], "}"}], "/.", 
                 RowBox[{"(", 
                  RowBox[{"eval", "//", "First"}], ")"}]}], "//", "N"}], 
               "}"}], ",", 
              RowBox[{"Take", "[", 
               RowBox[{"#", ",", 
                RowBox[{"-", "1"}]}], "]"}]}], "]"}], "&"}]}], "//", 
          "Transpose"}], "//", 
         RowBox[{
          RowBox[{"Flatten", "/@", "#"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Grid", "[", 
          RowBox[{"#", ",", 
           RowBox[{"Dividers", "->", "All"}]}], "]"}], "&"}]}], "]"}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{"points", "//", 
          RowBox[{
           RowBox[{"Map", "[", 
            RowBox[{
             RowBox[{
              RowBox[{"(", 
               RowBox[{
                RowBox[{"First", "@", "#"}], "-", 
                RowBox[{"Last", "@", "#"}]}], ")"}], "&"}], ",", "#"}], "]"}],
            "&"}]}], "//", 
         RowBox[{
          RowBox[{"Map", "[", 
           RowBox[{
            RowBox[{
             RowBox[{"#", "^", "2"}], "&"}], ",", "#", ",", 
            RowBox[{"{", "2", "}"}]}], "]"}], "&"}]}], "//", 
        RowBox[{
         RowBox[{"Total", "/@", "#"}], "&"}]}], "//", 
       RowBox[{
        RowBox[{"Sqrt", "/@", "#"}], "&"}]}]}], ",", "\[IndentingNewLine]", 
     "Nothing"}], "]"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"eval", "//", "First"}], "//", "N"}]}]}]], "Input",
 CellChangeTimes->{{3.871887479716145*^9, 3.871887497599922*^9}, {
   3.871887552413165*^9, 3.871887558477096*^9}, {3.871887593171126*^9, 
   3.87188764431096*^9}, {3.871887686763433*^9, 3.871887692212328*^9}, {
   3.871887727296193*^9, 3.8718877283103943`*^9}, {3.8718877651522017`*^9, 
   3.871887807486765*^9}, {3.871888215481052*^9, 3.871888232125287*^9}, {
   3.871893900342667*^9, 3.871893976322942*^9}, {3.871894017013279*^9, 
   3.871894017727285*^9}, {3.8718940499823837`*^9, 3.8718940508207903`*^9}, {
   3.87189411356434*^9, 3.871894114478372*^9}, {3.871894174445038*^9, 
   3.871894223777006*^9}, {3.87191865644144*^9, 3.871918658315392*^9}, {
   3.8719187017243834`*^9, 3.8719187038520727`*^9}, {3.8719187388586617`*^9, 
   3.871918764692956*^9}, {3.871918816847649*^9, 3.871918844645383*^9}, {
   3.871918954294279*^9, 3.8719189975134993`*^9}, {3.87191940832541*^9, 
   3.87191943334023*^9}, {3.871919513262493*^9, 3.871919556126436*^9}, {
   3.871919595363358*^9, 3.871919598959486*^9}, {3.8719197278383703`*^9, 
   3.8719197351271553`*^9}, {3.871921824740267*^9, 3.871921825411461*^9}, {
   3.871921911904357*^9, 3.8719219969879093`*^9}, 3.871931921883073*^9, {
   3.8719320831776237`*^9, 3.8719321200026827`*^9}, {3.871932173846888*^9, 
   3.871932174547483*^9}, {3.871932235180825*^9, 3.871932262718889*^9}, {
   3.871932295690782*^9, 3.871932340853784*^9}, {3.8719323919244537`*^9, 
   3.871932396522873*^9}, {3.871932434080082*^9, 3.871932451731018*^9}, {
   3.871932488390277*^9, 3.871932522020731*^9}, {3.871965421861615*^9, 
   3.871965475110799*^9}, {3.871965542082204*^9, 3.871965547647353*^9}, {
   3.871965695471809*^9, 3.8719656960448713`*^9}, {3.871966278785927*^9, 
   3.871966282908985*^9}, {3.871966817237946*^9, 3.871966818003621*^9}, {
   3.871966858118101*^9, 3.871966858940407*^9}, {3.8719673116266108`*^9, 
   3.871967312579108*^9}, {3.87196751805786*^9, 3.871967521116004*^9}, {
   3.871967567371355*^9, 3.871967567757503*^9}, {3.8719676976387653`*^9, 
   3.8719677055039377`*^9}, {3.8719677834919643`*^9, 3.871967810869413*^9}, {
   3.8719679426894627`*^9, 3.871967947792926*^9}, {3.871968035579925*^9, 
   3.8719680648357773`*^9}, {3.871968114832329*^9, 3.871968128297131*^9}, {
   3.871968166143262*^9, 3.871968166715526*^9}, {3.871968257394113*^9, 
   3.871968262555895*^9}, {3.87196829321392*^9, 3.8719682942876463`*^9}, {
   3.871973106661717*^9, 3.871973112861516*^9}, {3.871973193094653*^9, 
   3.871973194232027*^9}, {3.871973360734042*^9, 3.871973373126989*^9}, {
   3.8719734093591537`*^9, 3.871973409727911*^9}, {3.871973447884165*^9, 
   3.871973503831283*^9}, {3.8719761295885897`*^9, 3.8719761358070602`*^9}, {
   3.8719761852220716`*^9, 3.871976381712061*^9}, {3.8720526033004*^9, 
   3.872052625884467*^9}, {3.872052821894945*^9, 3.8720528243334293`*^9}, {
   3.872053599730405*^9, 3.872053632697014*^9}, {3.872053813266049*^9, 
   3.872053814390523*^9}, {3.872227131409071*^9, 3.872227193547657*^9}, {
   3.872227229803397*^9, 3.872227239961542*^9}, {3.872227314360325*^9, 
   3.8722273260202293`*^9}, {3.872227382775607*^9, 3.872227418298526*^9}, {
   3.872227461650676*^9, 3.87222746372779*^9}, {3.87222749452941*^9, 
   3.8722275365155773`*^9}, {3.8722275800225687`*^9, 
   3.8722275808174057`*^9}, {3.872227620273551*^9, 3.872227638117157*^9}, 
   3.872227677433093*^9, {3.8722277183078527`*^9, 3.872227727998815*^9}, {
   3.872227763031468*^9, 3.8722277950779333`*^9}, {3.8722278573531322`*^9, 
   3.8722278595789843`*^9}, 3.87222794221894*^9, {3.872227974994749*^9, 
   3.872228037429139*^9}, {3.8722280755136757`*^9, 3.87222822498263*^9}, {
   3.8722285994912453`*^9, 3.872228635242331*^9}, {3.872228852427012*^9, 
   3.872228899963132*^9}, {3.872229159157515*^9, 3.872229184986931*^9}, {
   3.872229276646233*^9, 3.872229280588162*^9}, 3.872229649215127*^9, {
   3.87222969061078*^9, 3.872229700712111*^9}, {3.872229764296651*^9, 
   3.8722298109552603`*^9}, {3.872229847030231*^9, 3.8722298898222733`*^9}, {
   3.87222995418666*^9, 3.872229991560005*^9}, {3.872230027247669*^9, 
   3.872230064846319*^9}, {3.8722301463309937`*^9, 3.872230175111985*^9}, 
   3.87223023152927*^9, 3.8722302657308064`*^9, {3.872230308740641*^9, 
   3.872230313286141*^9}, {3.872245796678767*^9, 3.8722458012426434`*^9}, 
   3.872245870295103*^9, {3.872245933141944*^9, 3.87224603673029*^9}, 
   3.872246078418956*^9, {3.872246112985475*^9, 3.87224621361215*^9}, {
   3.872246249160623*^9, 3.872246298852219*^9}, {3.8722463304847813`*^9, 
   3.872246355129428*^9}, {3.872246396543681*^9, 3.872246421046482*^9}, {
   3.87224646112115*^9, 3.872246491218321*^9}, {3.872246530799119*^9, 
   3.872246537560668*^9}, {3.872246954720902*^9, 3.8722469560756702`*^9}, {
   3.872247038373595*^9, 3.872247052827866*^9}, {3.872247118453021*^9, 
   3.8722471926877747`*^9}, {3.872247226496471*^9, 3.872247323069315*^9}, {
   3.872247394572092*^9, 3.872247395451879*^9}, {3.872247822199974*^9, 
   3.8722478465414124`*^9}, {3.8722479950358267`*^9, 
   3.8722479957114973`*^9}, {3.8722481434204884`*^9, 
   3.8722481489839363`*^9}, {3.87230688462062*^9, 3.872306885429875*^9}, {
   3.872306941684249*^9, 3.872306942808691*^9}, {3.872311723251595*^9, 
   3.8723117977373543`*^9}, {3.872314548687635*^9, 3.87231455045343*^9}, {
   3.872314595381403*^9, 3.87231459585338*^9}, {3.872341735276582*^9, 
   3.8723417591550007`*^9}, {3.8723419358440332`*^9, 3.872341978588171*^9}, {
   3.872342022385604*^9, 3.872342034480843*^9}, {3.872342188791711*^9, 
   3.872342208383012*^9}, {3.872342240881886*^9, 3.8723422448156347`*^9}, {
   3.872343067618401*^9, 3.87234307006394*^9}, {3.872395928195756*^9, 
   3.872395929903315*^9}, {3.872395977201404*^9, 3.872396041257126*^9}, {
   3.8723960718252068`*^9, 3.872396072331667*^9}, {3.872396138725506*^9, 
   3.8723961405491943`*^9}, {3.8723962238901463`*^9, 3.872396226098159*^9}, {
   3.872396269889812*^9, 3.8723962713687553`*^9}, {3.872396345756868*^9, 
   3.8723963736350393`*^9}, {3.8723965310778723`*^9, 
   3.8723965366525097`*^9}, {3.8723966686235027`*^9, 3.872396669204019*^9}, {
   3.872396806299285*^9, 3.872396808124995*^9}, {3.872397172585573*^9, 
   3.8723971760944767`*^9}, {3.872397264169573*^9, 3.872397266002136*^9}, {
   3.8723974414033337`*^9, 3.872397450301363*^9}, {3.872423397786235*^9, 
   3.8724235423987427`*^9}, {3.8724236099875727`*^9, 
   3.8724236119111443`*^9}, {3.872423712431264*^9, 3.872423715010457*^9}, {
   3.872438347147915*^9, 3.87243834922479*^9}, 3.872441300581422*^9, {
   3.872828455843094*^9, 3.8728284618952208`*^9}},
 CellLabel->
  "In[3938]:=",ExpressionUUID->"933d04c2-9d60-4dda-983b-a7c3acaf95eb"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"2", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"4", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"14", ",", "\<\"Nominal\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"3", ",", "\<\"Numerical\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"9", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"11", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"6", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"8", ",", "\<\"Nominal\"\>"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"13", ",", "\<\"Numerical\"\>"}], "}"}]}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.87282866150028*^9, 3.872828696887265*^9},
 CellLabel->
  "Out[3938]=",ExpressionUUID->"385ea610-0862-4bb5-9cc0-8c349c698ce7"],

Cell[BoxData[
 TagBox[GridBox[{
    {"0.4720437122701476`", "0.4720436880809868`", 
     SubscriptBox["P", "\[Alpha]"], "0.3333333333333333`", 
     "0.5279562877298525`", "0.5279562666050317`"},
    {"0.594804401060433`", "0.5948043818077793`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Alpha]"}]], "0.643`", "0.23813774998195264`", 
     "0.23813772013082826`"},
    {"0.7618622500180473`", "0.7618622170416027`", 
     SubscriptBox["P", 
      RowBox[{"1", ",", "\[Beta]"}]], "0.71175`", "0.40519559893956686`", 
     "0.405195579568079`"},
    {"0.7555280684346597`", "0.7555280456960388`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Alpha]"}]], "0.7515`", "0.5610143605992984`", 
     "0.5610143323160459`"},
    {"0.43898563940070146`", "0.43898561029426625`", 
     SubscriptBox["P", 
      RowBox[{"2", ",", "\[Beta]"}]], "0.3965`", "0.24447193156534017`", 
     "0.24447190834357405`"},
    {"0.78862995315262`", "0.7886299447180659`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Alpha]"}]], "0.899`", "0.4566012911339504`", 
     "0.4566012615973461`"},
    {"0.5433987088660497`", "0.5433986867677436`", 
     SubscriptBox["P", 
      RowBox[{"3", ",", "\[Beta]"}]], "0.5295`", "0.21137004684738`", 
     "0.21137002678837497`"}
   },
   AutoDelete->False,
   GridBoxDividers->{"Columns" -> {{True}}, "Rows" -> {{True}}},
   GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
  "Grid"]], "Print",
 CellChangeTimes->{3.8728286641473*^9, 3.872828699169394*^9},
 CellLabel->
  "During evaluation of \
In[3938]:=",ExpressionUUID->"67f04795-1493-44af-b11d-c0b31bb53dc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.298358797126937`*^-8", ",", "6.57766652756703`*^-8"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.87282866150028*^9, 3.872828699179409*^9},
 CellLabel->
  "Out[3948]=",ExpressionUUID->"f18b7a29-0b31-42b9-9c62-41437275b84a"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{
    SubscriptBox["P", "\[Alpha]"], "\[Rule]", "0.3333333333333333`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"1", ",", "\[Alpha]"}]], "\[Rule]", "0.643`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"2", ",", "\[Alpha]"}]], "\[Rule]", "0.7515`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"3", ",", "\[Alpha]"}]], "\[Rule]", "0.899`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"1", ",", "\[Beta]"}]], "\[Rule]", "0.71175`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"2", ",", "\[Beta]"}]], "\[Rule]", "0.3965`"}], ",", 
   RowBox[{
    SubscriptBox["P", 
     RowBox[{"3", ",", "\[Beta]"}]], "\[Rule]", "0.5295`"}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "\[Alpha]"}]], "\[Rule]", "0.0077855`"}], 
   ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    RowBox[{"-", "0.010057`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"2", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    RowBox[{"-", "0.0000985`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "\[Beta]"}]], "\[Rule]", "0.004541125`"}], 
   ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "3", ",", "\[Beta]"}]], "\[Rule]", 
    RowBox[{"-", "0.001371625`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"2", ",", "3", ",", "\[Beta]"}]], "\[Rule]", "0.00305325`"}], 
   ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "3", ",", "\[Alpha]"}]], "\[Rule]", 
    RowBox[{"-", "0.001287829`"}]}], ",", 
   RowBox[{
    SubscriptBox["\[CapitalGamma]", 
     RowBox[{"1", ",", "2", ",", "3", ",", "\[Beta]"}]], "\[Rule]", 
    "0.001036573625`"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.87282866150028*^9, 3.8728286991888723`*^9},
 CellLabel->
  "Out[3949]=",ExpressionUUID->"26d83a2e-6197-4fc2-a0e6-e016813743f5"]
}, Open  ]],

Cell["\<\
Yes. Another split produced a trio with very low error correlation!\
\>", "Text",
 CellChangeTimes->{{3.872828716594964*^9, 
  3.872828742272212*^9}},ExpressionUUID->"da936e4c-6488-4133-a09a-\
824eee521371"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Conclusions", "Section",
 CellChangeTimes->{{3.8728287477472982`*^9, 
  3.872828750798491*^9}},ExpressionUUID->"562c04e9-e2d6-41ca-b54c-\
1fd8bac1818a"],

Cell["\<\
Straightforward algebraic calculations and distances allowed us to identify \
least correlated trios on unlabeled data. The implications for many \
applications such as AutoML are clear. \
\>", "Text",
 CellChangeTimes->{{3.8728295451884327`*^9, 
  3.8728296150791187`*^9}},ExpressionUUID->"3017ff74-1028-4a57-af52-\
72bae7db0304"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1728, 888},
WindowMargins->{{0, Automatic}, {-24, Automatic}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
TaggingRules-><|"TryRealOnly" -> False|>,
Magnification:>1.5 Inherited,
FrontEndVersion->"13.1 for Mac OS X ARM (64-bit) (June 16, 2022)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"84f4330e-9943-42be-868a-8c13e28e01c9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 255, 4, 238, "Title",ExpressionUUID->"bcd3c995-0cc1-4a17-bbbb-3a732f1bacde"],
Cell[838, 28, 2190, 34, 467, "Text",ExpressionUUID->"4d69d43d-fca1-4c9f-b4de-bc7c9c8ddb12"],
Cell[CellGroupData[{
Cell[3053, 66, 187, 3, 101, "Section",ExpressionUUID->"4bab144b-ae03-494f-a2f1-3c03b3de0382"],
Cell[3243, 71, 1202, 19, 260, "Text",ExpressionUUID->"47e20420-19a1-48c0-81a7-e6f654abe6b7"],
Cell[CellGroupData[{
Cell[4470, 94, 192, 3, 67, "Subsubsection",ExpressionUUID->"355e0a5d-d0da-4e0a-a36a-75ae1abe5b1c"],
Cell[4665, 99, 310, 7, 53, "Text",ExpressionUUID->"8d4b4a9b-d521-4aec-bdd3-5f87f9242cd9"],
Cell[4978, 108, 625, 11, 111, "ItemNumbered",ExpressionUUID->"7c7d572a-0b77-4317-8168-fc32c66b1053"],
Cell[5606, 121, 410, 8, 80, "ItemNumbered",ExpressionUUID->"d67b66bb-a289-4848-a5bc-4a331b981994"],
Cell[6019, 131, 265, 6, 48, "ItemNumbered",ExpressionUUID->"41e2b6e0-d550-43a9-80ae-1a49c4eb4297"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[6333, 143, 246, 4, 101, "Section",ExpressionUUID->"e4431d5b-799b-40cd-89da-495df9619242"],
Cell[CellGroupData[{
Cell[6604, 151, 221, 5, 81, "Subsection",ExpressionUUID->"d573a88a-7404-4d04-95b7-b9dbb019a0ef"],
Cell[6828, 158, 584, 11, 122, "Text",ExpressionUUID->"944f58e9-dd54-4916-9bdd-8517d4750675"],
Cell[7415, 171, 258, 4, 48, "ItemNumbered",ExpressionUUID->"0c11b4cb-8a6a-4df0-ae26-4b12bd7520d7"],
Cell[7676, 177, 346, 5, 48, "ItemNumbered",ExpressionUUID->"a90a9b2f-0c88-4b44-8121-a25ee238d3a5"],
Cell[8025, 184, 441, 8, 48, "ItemNumbered",ExpressionUUID->"0f84da5b-d520-42d2-841b-614bea97ed08"],
Cell[8469, 194, 237, 6, 53, "Text",ExpressionUUID->"70267c42-7d85-42d4-9a2b-f40a46f33d88"],
Cell[CellGroupData[{
Cell[8731, 204, 226, 4, 46, "Input",ExpressionUUID->"16efe054-a2db-4b9d-9b3e-ab2435b4ad6e"],
Cell[8960, 210, 46166, 845, 240, "Output",ExpressionUUID->"a017274c-a52c-4ce3-b334-92bb6b6a4e2e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[55163, 1060, 231, 4, 46, "Input",ExpressionUUID->"8fbe5811-9aa6-4f69-bfac-62aa9b38bd1f"],
Cell[55397, 1066, 50940, 936, 282, "Output",ExpressionUUID->"e287259e-b90d-4882-abaf-ce98bbcbf4f8"]
}, Open  ]],
Cell[106352, 2005, 284, 6, 53, "Text",ExpressionUUID->"eb1653cb-1d83-459c-be6f-902b95de04ec"],
Cell[106639, 2013, 426, 10, 46, "Input",ExpressionUUID->"07259698-ce42-481a-baae-128f16fcde68"],
Cell[CellGroupData[{
Cell[107090, 2027, 187, 3, 46, "Input",ExpressionUUID->"b1262ebf-6e0a-4983-8bcb-4a655a305a0a"],
Cell[107280, 2032, 900, 15, 105, "Output",ExpressionUUID->"418eff3c-612d-45fc-afb8-e7af577d69da"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[108229, 2053, 198, 3, 81, "Subsection",ExpressionUUID->"fda6bf1d-84e9-4f1e-a051-82460809eb2c"],
Cell[108430, 2058, 767, 13, 122, "Text",ExpressionUUID->"cb81a8b4-42dd-4e8c-8568-0fa33de9a218"]
}, Open  ]],
Cell[CellGroupData[{
Cell[109234, 2076, 199, 3, 81, "Subsection",ExpressionUUID->"db2c4d6c-490b-43d4-abe6-197b90b58627"],
Cell[109436, 2081, 1159, 17, 226, "Text",ExpressionUUID->"2260482e-7fcf-414a-b230-43676631dd67"],
Cell[CellGroupData[{
Cell[110620, 2102, 1741, 41, 202, "Input",ExpressionUUID->"16a01e0c-fd0d-4255-bf2c-4896149d4b8b"],
Cell[112364, 2145, 515, 9, 73, "Output",ExpressionUUID->"1749d374-b700-46e6-890d-8735a598e7d3"]
}, Open  ]],
Cell[112894, 2157, 359, 5, 53, "Text",ExpressionUUID->"d6d8a322-9c65-49cb-a495-e15b8ffac15c"],
Cell[CellGroupData[{
Cell[113278, 2166, 338, 7, 46, "Input",ExpressionUUID->"eca82dc6-16ef-4f45-85e4-181b8e9e6598"],
Cell[113619, 2175, 750, 17, 73, "Output",ExpressionUUID->"69abd17c-ee35-4a21-bcc3-21a7cd98749e"]
}, Open  ]],
Cell[114384, 2195, 344, 7, 53, "Text",ExpressionUUID->"20c42cb6-6cc5-4908-9fe9-22fefd404443"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[114777, 2208, 263, 6, 101, "Section",ExpressionUUID->"d6d4ca9d-7ce1-4c10-88be-dc9e33f1a7fe"],
Cell[115043, 2216, 1047, 16, 226, "Text",ExpressionUUID->"e1dff5a3-df83-4275-ba00-7e00d8b38a99"],
Cell[CellGroupData[{
Cell[116115, 2236, 190, 3, 81, "Subsection",ExpressionUUID->"4a9eb61f-791d-425d-af0f-5fbc87109975"],
Cell[116308, 2241, 868, 21, 140, "Input",ExpressionUUID->"74e3b699-702c-43e6-8652-522165f5638f"],
Cell[117179, 2264, 857, 22, 80, "Input",ExpressionUUID->"f906e884-ab74-4735-9612-942ccef15d8a"],
Cell[118039, 2288, 2111, 54, 295, "Input",ExpressionUUID->"9b0b19f3-de00-479d-8102-fe910e4fd448"],
Cell[120153, 2344, 673, 18, 78, "Input",ExpressionUUID->"d718a13c-d86e-4385-8b81-5c7c6f857d25"],
Cell[CellGroupData[{
Cell[120851, 2366, 15865, 350, 1240, "Input",ExpressionUUID->"58a55f73-9b82-444d-9650-c7dae73b20be"],
Cell[136719, 2718, 1783, 40, 218, "Print",ExpressionUUID->"3476aafd-99cc-48df-a0b4-e0651380dae6"],
Cell[138505, 2760, 3070, 45, 76, "Output",ExpressionUUID->"d96465c2-7e54-444a-ace0-c8f272ea3cb0"]
}, Open  ]],
Cell[141590, 2808, 298, 6, 53, "Text",ExpressionUUID->"228d98a3-3ded-4cd6-8ada-85375480de98"],
Cell[CellGroupData[{
Cell[141913, 2818, 15865, 350, 1240, "Input",ExpressionUUID->"48cb8626-1d94-4954-b197-e6314d890d6e"],
Cell[157781, 3170, 1664, 39, 218, "Print",ExpressionUUID->"efe9b12e-ef99-40a1-9f87-6f9d99e16ec9"],
Cell[159448, 3211, 262, 6, 73, "Output",ExpressionUUID->"db134067-7929-427d-8726-f1c3a4ad4184"]
}, Open  ]],
Cell[159725, 3220, 331, 7, 88, "Text",ExpressionUUID->"3729d3c7-5572-4e69-8c7a-9a9ca90d6c05"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[160105, 3233, 255, 4, 101, "Section",ExpressionUUID->"b9e16553-5fb1-401c-aff0-29a98f2b8bdd"],
Cell[160363, 3239, 277, 6, 53, "Text",ExpressionUUID->"e96a30af-dfb5-4cd3-9c4b-cade1bfd09da"],
Cell[CellGroupData[{
Cell[160665, 3249, 1310, 35, 202, "Input",ExpressionUUID->"da31fe1b-26b7-4e6a-9d25-59a51b996a7a"],
Cell[161978, 3286, 205, 4, 52, "Output",ExpressionUUID->"4dcbce36-2c3f-49a4-a873-54e2c5431042"]
}, Open  ]],
Cell[162198, 3293, 9957, 218, 853, "Input",ExpressionUUID->"8325179c-c3c3-4c03-80e1-e3873b8c1fc3"],
Cell[CellGroupData[{
Cell[172180, 3515, 472, 13, 46, "Input",ExpressionUUID->"7cb3a2e1-22b0-48eb-94d4-19ca899554a2"],
Cell[172655, 3530, 5354, 105, 554, "Output",ExpressionUUID->"d021aff5-9c67-4e78-aeaf-c294e998838a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178046, 3640, 209, 4, 46, "Input",ExpressionUUID->"de3cfe84-3f9c-4329-b095-84a3c7de566f"],
Cell[178258, 3646, 318, 7, 52, "Output",ExpressionUUID->"ece51fe1-8429-452f-9819-185cd5aacc42"]
}, Open  ]],
Cell[CellGroupData[{
Cell[178613, 3658, 186, 3, 67, "Subsubsection",ExpressionUUID->"eaa44479-8592-40b7-9b47-447ce239a351"],
Cell[178802, 3663, 552, 10, 122, "Text",ExpressionUUID->"7f18e5f7-57c5-4a10-82ef-b0b70a429804"],
Cell[CellGroupData[{
Cell[179379, 3677, 12025, 249, 946, "Input",ExpressionUUID->"f2371c2d-0c4b-44d6-b3ff-7d181cc4c3b4"],
Cell[191407, 3928, 160, 3, 52, "Output",ExpressionUUID->"265e55f1-6f8b-4812-8640-92c0ed906ebc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[191604, 3936, 467, 11, 46, "Input",ExpressionUUID->"a9a25450-c9ab-41ed-8a69-d1f80a5da112"],
Cell[192074, 3949, 548, 12, 52, "Output",ExpressionUUID->"7e917f0b-dd20-4449-aa2a-d400bbe04c00"]
}, Open  ]],
Cell[CellGroupData[{
Cell[192659, 3966, 1299, 39, 46, "Input",ExpressionUUID->"68699d07-db76-4e10-beb9-6c2eb3c8d78b"],
Cell[193961, 4007, 1953, 51, 125, "Output",ExpressionUUID->"e5c8c8b7-71f3-4cf4-b963-3796248b7915"]
}, Open  ]],
Cell[CellGroupData[{
Cell[195951, 4063, 296, 6, 46, "Input",ExpressionUUID->"d9cc5ed6-7d43-49d7-aa1b-5725f3c0b7bf"],
Cell[196250, 4071, 1025, 30, 84, "Output",ExpressionUUID->"32fc2204-c830-4979-a003-0d35b14e6172"]
}, Open  ]],
Cell[CellGroupData[{
Cell[197312, 4106, 181, 3, 46, "Input",ExpressionUUID->"73f565cd-bfbe-48cc-a3e6-250d864288e4"],
Cell[197496, 4111, 1005, 28, 90, "Output",ExpressionUUID->"07ffa79a-2415-4eb0-b580-76aa3a7020ac"]
}, Open  ]],
Cell[CellGroupData[{
Cell[198538, 4144, 357, 11, 46, "Input",ExpressionUUID->"96ebd1d7-e455-454d-8e1e-88c62674ad77"],
Cell[198898, 4157, 2881, 64, 554, "Output",ExpressionUUID->"a826e79e-9183-4381-a7c2-81f04c8b03a5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[201816, 4226, 245, 5, 46, "Input",ExpressionUUID->"b220b6ef-8938-4150-97fb-88ff66fad3bc"],
Cell[202064, 4233, 1005, 30, 84, "Output",ExpressionUUID->"533175da-726a-47d3-9ff6-dbd8ca694f7f"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[203118, 4269, 289, 7, 81, "Subsection",ExpressionUUID->"2fbbb8e2-9fb5-4f9b-9e4f-fa6a583766f4"],
Cell[203410, 4278, 584, 10, 122, "Text",ExpressionUUID->"7f590444-465b-4b42-aec1-8ff07f5ed452"],
Cell[CellGroupData[{
Cell[204019, 4292, 221, 5, 46, "Input",ExpressionUUID->"b4e64fd3-fbce-4447-9a86-8b5e494fabe7"],
Cell[204243, 4299, 1003, 30, 84, "Output",ExpressionUUID->"76f07a60-50d6-4d33-83da-093c049a1fb9"]
}, Open  ]],
Cell[205261, 4332, 12928, 261, 1008, "Input",ExpressionUUID->"2a217be6-198d-42c8-973f-b58a3d5cba4b"],
Cell[218192, 4595, 253, 6, 53, "Text",ExpressionUUID->"3e6bd87d-d3a9-41ac-b770-f6bed2e7ea26"],
Cell[CellGroupData[{
Cell[218470, 4605, 1278, 41, 109, "Input",ExpressionUUID->"f78f9b84-b8b3-4d6c-bed5-a292568f1fe8"],
Cell[219751, 4648, 692, 12, 84, "Output",ExpressionUUID->"7a47581b-63c5-47ac-ae4f-04e5087e8c6d"]
}, Open  ]],
Cell[220458, 4663, 13034, 261, 915, "Input",ExpressionUUID->"830f9ff7-e4ad-4ffb-8af0-6dc60092ff89"],
Cell[CellGroupData[{
Cell[233517, 4928, 180, 3, 46, "Input",ExpressionUUID->"d9e95dc6-73c2-4a04-9eaa-03aa0d4ff036"],
Cell[233700, 4933, 1398, 39, 125, "Output",ExpressionUUID->"043c26cd-11fc-4e1a-8f9d-299d73f9c3e8"]
}, Open  ]],
Cell[235113, 4975, 13326, 265, 915, "Input",ExpressionUUID->"f929f99f-773c-40b0-bc3c-53164b726e68"],
Cell[CellGroupData[{
Cell[248464, 5244, 182, 3, 46, "Input",ExpressionUUID->"ada44213-b013-47cb-a5c6-1c9bf492ae45"],
Cell[248649, 5249, 1373, 39, 125, "Output",ExpressionUUID->"b3ade69d-131c-405f-8ab0-0a9fc0c0ea68"]
}, Open  ]],
Cell[CellGroupData[{
Cell[250059, 5293, 1225, 40, 78, "Input",ExpressionUUID->"ee573039-85ee-4529-9c50-a4dae0c1a0ba"],
Cell[251287, 5335, 285, 6, 52, "Output",ExpressionUUID->"f1bc5bcc-af0e-41b2-868f-282b1b9aaba0"]
}, Open  ]],
Cell[CellGroupData[{
Cell[251609, 5346, 1175, 39, 78, "Input",ExpressionUUID->"ce2afad4-5543-47de-a49a-f63ffdd6cfdc"],
Cell[252787, 5387, 324, 7, 52, "Output",ExpressionUUID->"463e1197-a1d3-46aa-8278-db9430078c15"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253148, 5399, 300, 7, 46, "Input",ExpressionUUID->"b62826cd-96ee-4ed2-ad68-7da046f7df72"],
Cell[253451, 5408, 217, 5, 52, "Output",ExpressionUUID->"c2bcdfec-a813-4469-814c-65950c00b8aa"]
}, Open  ]],
Cell[CellGroupData[{
Cell[253705, 5418, 15678, 332, 962, "Input",ExpressionUUID->"3150d528-afbc-42b6-a0bd-6daa3bdaf3d2"],
Cell[269386, 5752, 1393, 36, 105, "Output",ExpressionUUID->"52f718d4-38c6-4438-ae55-008f8e2f0315"],
Cell[270782, 5790, 2011, 43, 218, "Print",ExpressionUUID->"13db7a91-c50f-43fb-a915-a60b874fd087"],
Cell[272796, 5835, 638, 12, 76, "Output",ExpressionUUID->"13dd2764-c302-47b1-8381-47d262d7d079"],
Cell[273437, 5849, 2461, 62, 110, "Output",ExpressionUUID->"91c60eb2-6ae6-46d1-8d34-b1f19f0a85e3"]
}, Open  ]],
Cell[275913, 5914, 169, 3, 53, "Text",ExpressionUUID->"dafe7088-37bd-492b-9821-4846acc3ebed"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[276131, 5923, 171, 3, 101, "Section",ExpressionUUID->"379d1d5e-a6d2-4a1b-b195-e37802f9d099"],
Cell[276305, 5928, 350, 7, 53, "Text",ExpressionUUID->"d1f83cdf-dc6a-4858-bdf9-b7749d932da2"],
Cell[CellGroupData[{
Cell[276680, 5939, 1302, 35, 202, "Input",ExpressionUUID->"3ba8c25f-0e2a-4e43-a2f1-e3241a08e2c9"],
Cell[277985, 5976, 183, 3, 73, "Output",ExpressionUUID->"56212bf4-2fb6-4fc2-9181-f5bc248f8b6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[278205, 5984, 15678, 332, 962, "Input",ExpressionUUID->"933d04c2-9d60-4dda-983b-a7c3acaf95eb"],
Cell[293886, 6318, 1022, 30, 105, "Output",ExpressionUUID->"385ea610-0862-4bb5-9cc0-8c349c698ce7"],
Cell[294911, 6350, 1625, 37, 218, "Print",ExpressionUUID->"67f04795-1493-44af-b11d-c0b31bb53dc0"],
Cell[296539, 6389, 264, 6, 76, "Output",ExpressionUUID->"f18b7a29-0b31-42b9-9c62-41437275b84a"],
Cell[296806, 6397, 2104, 57, 110, "Output",ExpressionUUID->"26d83a2e-6197-4fc2-a0e6-e016813743f5"]
}, Open  ]],
Cell[298925, 6457, 217, 5, 53, "Text",ExpressionUUID->"da936e4c-6488-4133-a09a-824eee521371"]
}, Open  ]],
Cell[CellGroupData[{
Cell[299179, 6467, 158, 3, 101, "Section",ExpressionUUID->"562c04e9-e2d6-41ca-b54c-1fd8bac1818a"],
Cell[299340, 6472, 341, 7, 88, "Text",ExpressionUUID->"3017ff74-1028-4a57-af52-72bae7db0304"]
}, Open  ]]
}, Open  ]]
}
]
*)

